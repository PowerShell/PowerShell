steps:
- checkout: self
  clean: true

- download: none

- template: release-SetReleaseTagAndContainerName.yml

- pwsh: |
    Import-module '$(BUILD.SOURCESDIRECTORY)/PowerShell/build.psm1'
    Install-AzCopy
  displayName: Install AzCopy
  retryCountOnTaskFailure: 2

- pwsh: |
    Import-module '$(BUILD.SOURCESDIRECTORY)/PowerShell/build.psm1'
    $azcopy = Find-AzCopy
    Write-Verbose -Verbose "Found AzCopy: $azcopy"

    & $azcopy cp https://$(StorageAccount).blob.core.windows.net/$(AzureVersion) $(System.ArtifactsDirectory) --recursive

    $packagesPath = Get-ChildItem -Path $(System.ArtifactsDirectory)\*.deb -Recurse -File | Select-Object -First 1 -ExpandProperty DirectoryName
    Write-Host "sending -- vso[task.setvariable variable=PackagesRoot]$packagesPath"
    Write-Host "##vso[task.setvariable variable=PackagesRoot]$packagesPath"

  displayName: Download Azure Artifacts
  retryCountOnTaskFailure: 2
  env:
    AZCOPY_AUTO_LOGIN_TYPE: MSI

- pwsh: |
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse | Select-Object -ExpandProperty FullName
  displayName: Capture downloaded artifacts

- pwsh: |
    git clone https://$(AzureDevOpsPat)@mscodehub.visualstudio.com/PowerShellCore/_git/Internal-PowerShellTeam-Tools '$(Pipeline.Workspace)/tools'
  displayName: Clone Internal-Tools repository

- pwsh: |
    $Path = "$(PackagesRoot)"
    $OutputPath = Join-Path $Path ‘hashes.sha256’
    $srcPaths = @($Path)
    $packages  = Get-ChildItem -Path $srcPaths -Include * -Recurse -File
    $checksums = $packages |
        ForEach-Object {
            Write-Verbose -Verbose "Generating checksum file for $($_.FullName)"
            $packageName = $_.Name
            $hash = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash.ToLower()
            # the '*' before the packagename signifies it is a binary
            "$hash *$packageName"
        }
    $checksums | Out-File -FilePath $OutputPath -Force
    $fileContent = Get-Content -Path $OutputPath -Raw | Out-String
    Write-Verbose -Verbose -Message $fileContent
  displayName: Add sha256 hashes

- checkout: ComplianceRepo

- pwsh: |
    $releaseVersion = '$(ReleaseTag)' -replace '^v',''
    $vstsCommandString = "vso[task.setvariable variable=ReleaseVersion]$releaseVersion"
    Write-Host "sending " + $vstsCommandString
    Write-Host "##$vstsCommandString"
  displayName: 'Set release version'

- template: Sbom.yml@ComplianceRepo
  parameters:
    BuildDropPath: '$(PackagesRoot)'
    Build_Repository_Uri: 'https://github.com/powershell/powershell.git'
    displayName: PowerShell Hashes SBOM
    packageName: PowerShell Artifact Hashes
    packageVersion: $(ReleaseVersion)
    sourceScanPath: '$(PackagesRoot)'

- pwsh: |
    Import-module '$(Pipeline.Workspace)/tools/Scripts/GitHubRelease.psm1'
    $releaseVersion = '$(ReleaseTag)' -replace '^v',''
    $semanticVersion = [System.Management.Automation.SemanticVersion]$releaseVersion

    $isPreview = $semanticVersion.PreReleaseLabel -ne $null

    $fileName = if ($isPreview) {
      "preview.md"
    }
    else {
      $semanticVersion.Major.ToString() + "." + $semanticVersion.Minor.ToString() + ".md"
    }

    $filePath = "$env:BUILD_SOURCESDIRECTORY/PowerShell/CHANGELOG/$fileName"
    Write-Verbose -Verbose "Selected Log file: $filePath"

    if (-not (Test-Path $filePath)) {
      throw "$filePath not found"
    }

    $changelog = Get-Content -Path $filePath

    $startPattern = "^## \[" + ([regex]::Escape($releaseVersion)) + "\]"
    $endPattern = "^## \[{0}\.{1}\.{2}*" -f $semanticVersion.Major, $semanticVersion.Minor, $semanticVersion.Patch

    $clContent = $changelog | ForEach-Object {
        if ($_ -match $startPattern) { $outputLine = $true }
        elseif ($_ -match $endPattern) { $outputLine = $false }
        if ($outputLine) { $_}
      } | Out-String

    Write-Verbose -Verbose "Selected content: `n$clContent"

    Publish-ReleaseDraft -Tag '$(ReleaseTag)' -Name '$(ReleaseTag) Release of PowerShell' -Description $clContent -User PowerShell -Repository PowerShell  -PackageFolder $(PackagesRoot) -Token $(GitHubReleasePat)
  displayName: Publish Release Draft
