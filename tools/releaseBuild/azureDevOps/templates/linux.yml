parameters:
  buildName: ''
  uploadDisplayName: 'Upload'
  parentJob: ''

jobs:
- job: build_${{ parameters.buildName }}
  displayName: Build ${{ parameters.buildName }}
  condition: succeeded()
  pool:
    name: PowerShell1ES
    demands:
    - ImageOverride -equals PSMMSUbuntu20.04-Secure
  dependsOn: ${{ parameters.parentJob }}
  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: build
      value: ${{ parameters.buildName }}
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - group: ESRP
    - group: DotNetPrivateBuildAccess

  steps:
  - checkout: self
    clean: true

  - checkout: ComplianceRepo
    clean: true

  - template: SetVersionVariables.yml
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - pwsh: |
      # create folder
      sudo mkdir /PowerShell

      # make the current user the owner
      sudo chown $env:USER /PowerShell
    displayName: 'Create /PowerShell'

  - template: cloneToOfficialPath.yml

  - template: insert-nuget-config-azfeed.yml
    parameters:
      repoRoot: $(PowerShellRoot)

  - powershell: |
      import-module "$env:POWERSHELLROOT/build.psm1"
      Sync-PSTags -AddRemoteIfMissing
    displayName: SyncTags
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)

  - powershell: |
      Import-Module "$env:POWERSHELLROOT/build.psm1"

      Start-PSBootstrap -Package
    displayName: 'Bootstrap'
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

  - pwsh: |
      try {
        Import-Module "$env:POWERSHELLROOT/build.psm1"
        Import-Module "$env:POWERSHELLROOT/tools/packaging"

        Invoke-AzDevOpsLinuxPackageBuild -ReleaseTag '$(ReleaseTagVar)' -BuildType '$(build)'

        Write-Verbose -Verbose "File permisions after building"
        Get-ChildItem -Path $(System.ArtifactsDirectory)/pwshLinuxBuild/pwsh | Select-Object -Property 'unixmode', 'size', 'name'

      } catch {
        Get-Error
        throw
      }
    displayName: 'Build'
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)

  - template: Sbom.yml@ComplianceRepo
    parameters:
      BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuild'
      Build_Repository_Uri: $(Github_Build_Repository_Uri)
      displayName: ${{ parameters.buildName }} SBOM
      PackageName: PowerShell Linux
      PackageVersion: $(Version)
      sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'rpm') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: Mariner x64 SBOM
        PackageName: PowerShell Linux Framework Dependent
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'rpm') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: Mariner arm64 SBOM
        PackageName: PowerShell Linux Framework Dependent
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'deb') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: MinSize SBOM
        PackageName: PowerShell Linux Minimum Size
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'deb') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: Arm32 SBOM
        PackageName: PowerShell Linux Arm32
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'deb') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: Arm64 SBOM
        PackageName: PowerShell Linux Arm64
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - ${{ if eq(variables.build,'alpine') }} :
    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64'
        Build_Repository_Uri: $(Github_Build_Repository_Uri)
        displayName: Alpine FXD SBOM
        PackageName: PowerShell Alpine Framework Dependent AMD64
        PackageVersion: $(Version)
        sourceScanPath: '$(PowerShellRoot)/tools'

  - pwsh: |
      Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuild'
      Write-Verbose -Verbose "File permisions before compressing"
      Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/pwshLinuxBuild/pwsh | Select-Object -Property 'unixmode', 'size', 'name'
      tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz *
    displayName: Compress pwshLinuxBuild

  - ${{ if eq(variables.build,'deb') }} :
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildMinSize.tar.gz *
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildArm32.tar.gz *
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildArm64.tar.gz *
      displayName: Compress deb

  - ${{ if eq(variables.build,'rpm') }} :
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64'
        tar -czvf $(System.ArtifactsDirectory)/pwshMarinerBuildAmd64.tar.gz *
      displayName: Compress pwshMarinerBuildAmd64

  - ${{ if eq(variables.build,'alpine') }} :
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64'
        tar -czvf $(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64.tar.gz *
      displayName: Compress pwshAlpineFxdBuildAmd64

  - ${{ if eq(variables.build,'rpm') }} :
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64'
        tar -czvf $(System.ArtifactsDirectory)/pwshMarinerBuildArm64.tar.gz *
      displayName: Compress pwshMarinerBuildArm64

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz'
        artifactName: pwshLinuxBuild.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta'
        artifactName: pwshLinuxBuild-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize.tar.gz'
        artifactName: pwshLinuxBuildMinSize.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize-meta'
        artifactName: pwshLinuxBuildMinSize-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32.tar.gz'
        artifactName: pwshLinuxBuildArm32.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32-meta'
        artifactName: pwshLinuxBuildArm32-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64.tar.gz'
        artifactName: pwshLinuxBuildArm64.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'deb') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64-meta'
        artifactName: pwshLinuxBuildArm64-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'rpm') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64.tar.gz'
        artifactName: pwshMarinerBuildAmd64.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'rpm') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64-meta'
        artifactName: pwshMarinerBuildAmd64-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'rpm') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64.tar.gz'
        artifactName: pwshMarinerBuildArm64.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'rpm') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64-meta'
        artifactName: pwshMarinerBuildArm64-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'alpine') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz'
        artifactName: pwshLinuxBuildAlpine.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'alpine') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta'
        artifactName: pwshLinuxBuildAlpine-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'alpine') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64.tar.gz'
        artifactName: pwshAlpineFxdBuildAmd64.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'alpine') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64-meta'
        artifactName: pwshAlpineFxdBuildAmd64-meta
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'fxdependent') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz'
        artifactName: pwshLinuxBuildFxdependent.tar.gz
      retryCountOnTaskFailure: 2

  - ${{ if eq(variables.build,'fxdependent') }} :
    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta'
        artifactName: pwshLinuxBuildFxdependent-meta
      retryCountOnTaskFailure: 2
