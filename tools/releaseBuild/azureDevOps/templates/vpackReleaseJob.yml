parameters:
  architecture: x64

jobs:
- job: vpack_${{ parameters.architecture }}
  variables:
    - group: vPack
    - group: ReleasePipelineSecrets

  displayName: Build and Publish VPack - ${{ parameters.architecture }}
  condition: succeeded()
  pool:
    name: PowerShell1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  steps:
  - checkout: self
    clean: true

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 3.1.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - template: ./SetVersionVariables.yml
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - pwsh: |
      Import-module '$(BUILD.SOURCESDIRECTORY)/build.psm1'
      Install-AzCopy
    displayName: Install AzCopy
    retryCountOnTaskFailure: 2

  - pwsh: |
      Import-module '$(BUILD.SOURCESDIRECTORY)/build.psm1'
      $azcopy = Find-AzCopy
      Write-Verbose -Verbose "Found AzCopy: $azcopy"

      Write-Host "running: $azcopy cp https://$(StorageAccount).blob.core.windows.net/$(AzureVersion)/PowerShell-$(Version)-win-${{ parameters.architecture }}.zip $(System.ArtifactsDirectory)"

      & $azcopy cp https://$(StorageAccount).blob.core.windows.net/$(AzureVersion)/PowerShell-$(Version)-win-${{ parameters.architecture }}.zip $(System.ArtifactsDirectory)
    displayName: 'Download Azure Artifacts'
    retryCountOnTaskFailure: 2
    env:
      AZCOPY_AUTO_LOGIN_TYPE: MSI

  - pwsh: 'Get-ChildItem $(System.ArtifactsDirectory)\* -recurse | Select-Object -ExpandProperty Name'
    displayName: 'Capture Artifact Listing'

  - pwsh: |
      $message = @()
      Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -include *.zip, *.msi | ForEach-Object {
          if($_.Name -notmatch 'PowerShell-\d+\.\d+\.\d+\-([a-z]*.\d+\-)?win\-(fxdependent|x64|arm64|x86|fxdependentWinDesktop)\.(msi|zip){1}')
          {
                $messageInstance = "$($_.Name) is not a valid package name"
                $message += $messageInstance
                Write-Warning $messageInstance
          }
      }

      if($message.count -gt 0){throw ($message | out-string)}
    displayName: 'Validate Zip and MSI Package Names'

  - pwsh: |
      Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -include *.zip, *.msi | ForEach-Object {
          if($_.Name -match 'PowerShell-\d+\.\d+\.\d+\-([a-z]*.\d+\-)?win\-(${{ parameters.architecture }})\.(zip){1}')
          {
              $destDir = "$(System.ArtifactsDirectory)\vpack${{ parameters.architecture }}"
              $null = new-item -ItemType Directory -Path $destDir
              Expand-Archive -Path $_.FullName -DestinationPath $destDir
              $vstsCommandString = "vso[task.setvariable variable=vpackDir]$destDir"
              Write-Host "sending " + $vstsCommandString
              Write-Host "##$vstsCommandString"
          }
      }
    displayName: 'Extract Zip'

  - pwsh: |
      $vpackVersion = '$(version)'

      if('$(VPackPublishOverride)' -ne '' -and '$(VPackPublishOverride)' -ne 'None' )
      {
        Write-Host "Using VPackPublishOverride varabile"
        $vpackVersion = '$(VPackPublishOverride)'
      }

      $vstsCommandString = "vso[task.setvariable variable=vpackVersion]$vpackVersion"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: 'Set vpackVersion'

  - pwsh: |
      Get-ChildItem -Path env:
    displayName: Capture Environment
    condition: succeededOrFailed()

  - task: PkgESVPack@12
    displayName: 'Package ES - VPack '
    inputs:
      sourceDirectory: '$(vpackDir)'
      description: PowerShell ${{ parameters.architecture }} $(version)
      pushPkgName: 'PowerShell.${{ parameters.architecture }}'
      configurations: Release
      platforms: x64
      target: '$(System.ArtifactsDirectory)'
      owner: tplunk
      provData: true
      version: '$(vpackVersion)'
      vpackToken: $(vPackPat)
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
