parameters:
  jobName: ""
  displayName: ""
  imageName: ""

jobs:
- job: ${{ parameters.jobName }}
  displayName: ${{ parameters.displayName }}
  pool:
    # testing
    vmImage: ${{ parameters.imageName }}
  variables:
  - group: mscodehub-feed-read-general
  - group: mscodehub-feed-read-akv
  - group: DotNetPrivateBuildAccess
  steps:
    - checkout: self
      clean: true

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: PowerShellCore
        pipeline: '696'
        preferTriggeringPipeline: true
        runVersion: latestFromBranch
        runBranch: '$(Build.SourceBranch)'
        artifact: finalResults
        patterns: '**/*.nupkg'
        path: '$(Pipeline.Workspace)/releasePipeline/finalResults'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: PowerShellCore
        pipeline: '696'
        preferTriggeringPipeline: true
        runVersion: latestFromBranch
        runBranch: '$(Build.SourceBranch)'
        artifact: metadata
        path: '$(Pipeline.Workspace)/releasePipeline/metadata'

    - template: /.pipelines/templates/insert-nuget-config-azfeed.yml@self
      parameters:
        repoRoot: $(Build.SourcesDirectory)

    - pwsh:  |
        Import-Module "$(Build.SourcesDirectory)/build.psm1" -Force

        Write-Verbose -Verbose "Capture hosting folder files"
        Get-ChildItem '$(Build.SourcesDirectory)/test/hosting'

        # The above cmdlet creates a lower-case nuget.config. There also exists a NuGet.config which we needed to replace.
        # Hence the following workaround

        if (-not $IsWindows) {
            Move-Item -Path '$(Build.SourcesDirectory)/test/hosting/nuget.config' -Destination '$(Build.SourcesDirectory)/test/hosting/NuGet.Config' -Force -ErrorAction Continue
            Write-Verbose -Verbose "Capture hosting folder files after Move-Item"
            Get-ChildItem '$(Build.SourcesDirectory)/test/hosting'
        }

        if(-not (Test-Path "$(Build.SourcesDirectory)/test/hosting/NuGet.Config"))
        {
            throw "NuGet.Config is not created"
        }
        else
        {
            Write-Verbose -Verbose "Capture NuGet.Config contents"
            Get-Content "$(Build.SourcesDirectory)/test/hosting/NuGet.Config" -Raw
        }
      displayName: Insert internal nuget feed

    - pwsh: |
        $dotnetMetadataPath = "$(Build.SourcesDirectory)/DotnetRuntimeMetadata.json"
        $dotnetMetadataJson = Get-Content $dotnetMetadataPath -Raw | ConvertFrom-Json

        # Channel is like: $Channel = "5.0.1xx-preview2"
        $Channel = $dotnetMetadataJson.sdk.channel

        $sdkVersion = (Get-Content "$(Build.SourcesDirectory)/global.json" -Raw | ConvertFrom-Json).sdk.version
        Import-Module "$(Build.SourcesDirectory)/build.psm1" -Force

        Find-Dotnet

        if(-not (Get-PackageSource -Name 'dotnet' -ErrorAction SilentlyContinue))
        {
            $nugetFeed = ([xml](Get-Content $(Build.SourcesDirectory)/nuget.config -Raw)).Configuration.packagesources.add | Where-Object { $_.Key -eq 'dotnet' } | Select-Object -ExpandProperty Value

            if ($nugetFeed) {
              Register-PackageSource -Name 'dotnet' -Location $nugetFeed -ProviderName NuGet
              Write-Verbose -Message "Register new package source 'dotnet'" -verbose
            }
        }

        ## Install latest version from the channel
        #Install-Dotnet -Channel "$Channel" -Version $sdkVersion

        Start-PSBootstrap

        Write-Verbose -Message "Installing .NET SDK completed." -Verbose

      displayName: Install .NET
      env:
        __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

    - pwsh: |
        $env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
        Import-Module "$(Build.SourcesDirectory)/build.psm1" -Force
        Start-PSBootstrap

        $localLocation = "$(Pipeline.Workspace)/releasePipeline/finalResults"
        $xmlElement = @"
          <add key=`"local`" value=`"$localLocation`" />
          <add key="dotnet" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v2" />
        </packageSources>
        "@

        $releaseVersion = Get-Content "$(Pipeline.Workspace)/releasePipeline/metadata/release.json" | ConvertFrom-Json | Select-Object -ExpandProperty 'ReleaseVersion'

        Set-Location -Path $(Build.SourcesDirectory)/test/hosting

        Get-ChildItem

        ## register the packages download directory in the nuget file
        $nugetConfigContent = Get-Content ./NuGet.Config -Raw
        $updateNugetContent = $nugetConfigContent.Replace("</packageSources>", $xmlElement)

        $updateNugetContent | Out-File ./NuGet.Config -Encoding ascii

        Get-Content ./NuGet.Config

        # Add workaround to unblock xUnit testing see issue: https://github.com/dotnet/sdk/issues/26462
        $dotnetPath = if ($IsWindows) { "$env:LocalAppData\Microsoft\dotnet" } else { "$env:HOME/.dotnet" }
        $env:DOTNET_ROOT = $dotnetPath

        dotnet --info
        dotnet restore
        dotnet test /property:RELEASE_VERSION=$releaseVersion --test-adapter-path:. "--logger:xunit;LogFilePath=$(System.DefaultWorkingDirectory)/test-hosting.xml"

      displayName: Restore and execute tests
      env:
        __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **\test-hosting.xml'
      inputs:
        testResultsFormat: XUnit
        testResultsFiles: '**\test-hosting.xml'
