steps:
- pwsh: |
    Get-ChildItem ENV:
  displayName: Capture environment

- template: release-SetReleaseTagAndContainerName.yml

- pwsh: |
    $name = "{0}_{1:x}" -f '$(releaseTag)', (Get-Date).Ticks
    Write-Host $name
    Write-Host "##vso[build.updatebuildnumber]$name"
  displayName: Set Release Name

- pwsh: |
    Import-module '$(BUILD.SOURCESDIRECTORY)/build.psm1'
    $azcopy = Find-AzCopy
    Write-Verbose -Verbose "Found AzCopy: $azcopy"

    & $azcopy cp https://$(StorageAccount).blob.core.windows.net/$(AzureVersion)/* $(System.ArtifactsDirectory) --recursive

  displayName: Download Azure Artifacts
  env:
    AZCOPY_AUTO_LOGIN_TYPE: MSI

- pwsh: |
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse | Select-Object -ExpandProperty Name
  displayName: Capture Artifact Listing

- pwsh: |
    $message = @()
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -filter *.rpm | ForEach-Object {
        if($_.Name -notmatch 'powershell\-(preview-|lts-)?\d+\.\d+\.\d+(_[a-z]*\.\d+)?-1.(rh|cm).(x86_64|aarch64)\.rpm')
        {
            $messageInstance = "$($_.Name) is not a valid package name"
            $message += $messageInstance
            Write-Warning $messageInstance
        }
    }
    if($message.count -gt 0){throw ($message | out-string)}
  displayName: Validate RPM package names

- pwsh: |
    $message = @()
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -filter *.tar.gz | ForEach-Object {
        if($_.Name -notmatch 'powershell-(lts-)?\d+\.\d+\.\d+\-([a-z]*.\d+\-)?(linux|osx|linux-musl)+\-(x64\-fxdependent|x64|arm32|arm64|x64\-musl-noopt\-fxdependent)\.(tar\.gz)')
        {
            $messageInstance = "$($_.Name) is not a valid package name"
            $message += $messageInstance
            Write-Warning $messageInstance
        }
    }
    if($message.count -gt 0){throw ($message | out-string)}
  displayName: Validate Tar.Gz Package Names

- pwsh: |
    $message = @()
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -filter *.pkg | ForEach-Object {
        if($_.Name -notmatch 'powershell-(lts-)?\d+\.\d+\.\d+\-([a-z]*.\d+\-)?osx(\.10\.12)?\-(x64|arm64)\.pkg')
        {
            $messageInstance = "$($_.Name) is not a valid package name"
            $message += $messageInstance
            Write-Warning $messageInstance
        }
    }
    if($message.count -gt 0){throw ($message | out-string)}
  displayName: Validate PKG Package Names

- pwsh: |
    $message = @()
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -include *.zip, *.msi | ForEach-Object {
        if($_.Name -notmatch 'PowerShell-\d+\.\d+\.\d+\-([a-z]*.\d+\-)?win\-(fxdependent|x64|arm64|x86|fxdependentWinDesktop)\.(msi|zip){1}')
        {
            $messageInstance = "$($_.Name) is not a valid package name"
            $message += $messageInstance
            Write-Warning $messageInstance
        }
    }

    if($message.count -gt 0){throw ($message | out-string)}
  displayName: Validate Zip and MSI Package Names

- pwsh: |
    $message = @()
    Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -filter *.deb | ForEach-Object {
        if($_.Name -notmatch 'powershell(-preview|-lts)?_\d+\.\d+\.\d+([\-~][a-z]*.\d+)?-\d\.deb_amd64\.deb')
        {
            $messageInstance = "$($_.Name) is not a valid package name"
            $message += $messageInstance
            Write-Warning $messageInstance
        }
    }
    if($message.count -gt 0){throw ($message | out-string)}
  displayName: Validate Deb Package Names
