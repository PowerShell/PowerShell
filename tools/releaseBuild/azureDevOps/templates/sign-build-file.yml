steps:
- pwsh: |
    $platform = '$(runtime)' -match '^linux' ? 'linux' : 'windows'
    $vstsCommandString = "vso[task.setvariable variable=ArtifactPlatform]$platform"
    Write-Host ("sending " + $vstsCommandString)
    Write-Host "##$vstsCommandString"
  displayName: Set artifact platform

- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: '$(unsignedBuildArtifactContainer)'
    itemPattern: '$(unsignedBuildArtifactName)'

- pwsh: |
    Get-ChildItem "$(Pipeline.Workspace)\*" -Recurse
  displayName: 'Capture Downloaded Artifacts'
  # Diagnostics is not critical it passes every time it runs
  continueOnError: true

- checkout: self
  clean: true
  path: $(repoFolder)

- template: SetVersionVariables.yml
  parameters:
      ReleaseTagVar: $(ReleaseTagVar)

- template: cloneToOfficialPath.yml

- pwsh: |
    $zipFileFilter = '$(unsignedBuildArtifactName)'
    $zipFileFilter = $zipFileFilter.Replace('**/', '')

    Write-Verbose -Verbose -Message "zipFileFilter = $zipFileFilter"

    Write-Verbose -Verbose -Message "Looking for $(Pipeline.Workspace)\$(unsignedBuildArtifactName)"

    $zipFilePath = Get-ChildItem -Path '$(Pipeline.Workspace)\$(unsignedBuildArtifactName)' -recurse

    if (-not (Test-Path $zipFilePath))
    {
        throw "zip file not found: $zipfilePath"
    }

    if ($zipFilePath.Count -ne 1) {
      Write-Verbose "zip filename" -verbose
      $zipFilePath | Out-String | Write-Verbose -Verbose
      throw 'multiple zip files found when 1 was expected'
    }

    $expandedFolderName = [System.io.path]::GetFileNameWithoutExtension($zipfilePath)
    $expandedFolderPath = Join-Path '$(Pipeline.Workspace)' 'expanded' $expandedFolderName

    Write-Verbose -Verbose -Message "Expaning $zipFilePath to $expandedFolderPath"

    New-Item -Path $expandedFolderPath -ItemType Directory
    Expand-Archive -Path $zipFilePath -DestinationPath $expandedFolderPath

    if (-not (Test-Path $expandedFolderPath\pwsh.exe) ) {
      throw 'zip did not expand as expected'
    }
    else {
      $vstsCommandString = "vso[task.setvariable variable=BinPath]$expandedFolderPath"
      Write-Host ("sending " + $vstsCommandString)
      Write-Host "##$vstsCommandString"
    }

  displayName: Expand zip packages
  condition: eq(variables['ArtifactPlatform'], 'windows')

- pwsh: |
    $tarPackageName = '$(unsignedBuildArtifactName)'

    Write-Verbose -Verbose -Message "tarPackageName = $tarPackageName"

    $tarPackagePath = Join-Path '$(Pipeline.Workspace)' $tarPackageName

    Write-Verbose -Verbose -Message "Looking for: $tarPackagePath"

    $expandedPathFolderName = $tarPackageName -replace '.tar.gz', ''
    $expandedFolderPath = Join-Path '$(Pipeline.Workspace)' 'expanded' $expandedPathFolderName

    if (-not (Test-Path $tarPackagePath))
    {
        throw "tar file not found: $tarPackagePath"
    }

    Write-Verbose -Verbose -Message "Expanding $tarPackagePath to $expandedFolderPath"

    New-Item -Path $expandedFolderPath -ItemType Directory
    tar -xf $tarPackagePath -C $expandedFolderPath

    if (-not (Test-Path $expandedFolderPath/pwsh) ) {
      throw 'tar.gz did not expand as expected'
    }
    else {
      $vstsCommandString = "vso[task.setvariable variable=BinPath]$expandedFolderPath"
      Write-Host ("sending " + $vstsCommandString)
      Write-Host "##$vstsCommandString"
    }

    Write-Verbose -Verbose "File permisions after expanding"
    Get-ChildItem -Path "$expandedFolderPath/pwsh" | Select-Object -Property 'unixmode', 'size', 'name'
  displayName: Expand tar.gz packages
  condition: eq(variables['ArtifactPlatform'], 'linux')

- template: insert-nuget-config-azfeed.yml
  parameters:
    repoRoot: $(PowerShellRoot)

- pwsh: |
    Set-Location $env:POWERSHELLROOT
    import-module "$env:POWERSHELLROOT/build.psm1"
    Sync-PSTags -AddRemoteIfMissing
  displayName: SyncTags
  condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))

- checkout: ComplianceRepo
  clean: true
  path: $(complianceRepoFolder)

- template: shouldSign.yml

- pwsh: |
    $fullSymbolsFolder = '$(BinPath)'
    Write-Verbose -Verbose "fullSymbolsFolder == $fullSymbolsFolder"

    Get-ChildItem -Recurse $fullSymbolsFolder | out-string | Write-Verbose -Verbose

    $filesToSignDirectory = "$(System.ArtifactsDirectory)\toBeSigned"

    if ((Test-Path -Path $filesToSignDirectory))  {
      Remove-Item -Path $filesToSignDirectory -Recurse -Force
    }

    $null = New-Item -ItemType Directory -Path $filesToSignDirectory -Force

    $signedFilesDirectory = "$(System.ArtifactsDirectory)\signed"

    if ((Test-Path -Path $signedFilesDirectory))  {
      Remove-Item -Path $signedFilesDirectory -Recurse -Force
    }

    $null = New-Item -ItemType Directory -Path $signedFilesDirectory -Force

    $itemsToCopyWithRecurse = @(
      "$($fullSymbolsFolder)\*.ps1"
      "$($fullSymbolsFolder)\Microsoft.PowerShell*.dll"
    )

    $itemsToCopy = @{
      "$($fullSymbolsFolder)\*.ps1" = ""
      "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Host\Microsoft.PowerShell.Host.psd1" = "Modules\Microsoft.PowerShell.Host"
      "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Management\Microsoft.PowerShell.Management.psd1" = "Modules\Microsoft.PowerShell.Management"
      "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Security\Microsoft.PowerShell.Security.psd1" = "Modules\Microsoft.PowerShell.Security"
      "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Utility\Microsoft.PowerShell.Utility.psd1" = "Modules\Microsoft.PowerShell.Utility"
      "$($fullSymbolsFolder)\pwsh.dll" = ""
      "$($fullSymbolsFolder)\System.Management.Automation.dll" = ""
    }

    ## Windows only modules

    if('$(ArtifactPlatform)' -eq 'windows') {
      $itemsToCopy += @{
        "$($fullSymbolsFolder)\pwsh.exe" = ""
        "$($fullSymbolsFolder)\Microsoft.Management.Infrastructure.CimCmdlets.dll" = ""
        "$($fullSymbolsFolder)\Microsoft.WSMan.*.dll" = ""
        "$($fullSymbolsFolder)\Modules\CimCmdlets\CimCmdlets.psd1" = "Modules\CimCmdlets"
        "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Diagnostics\Diagnostics.format.ps1xml" = "Modules\Microsoft.PowerShell.Diagnostics"
        "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Diagnostics\Event.format.ps1xml" = "Modules\Microsoft.PowerShell.Diagnostics"
        "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Diagnostics\GetEvent.types.ps1xml" = "Modules\Microsoft.PowerShell.Diagnostics"
        "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Security\Security.types.ps1xml" = "Modules\Microsoft.PowerShell.Security"
        "$($fullSymbolsFolder)\Modules\Microsoft.PowerShell.Diagnostics\Microsoft.PowerShell.Diagnostics.psd1" = "Modules\Microsoft.PowerShell.Diagnostics"
        "$($fullSymbolsFolder)\Modules\Microsoft.WSMan.Management\Microsoft.WSMan.Management.psd1" = "Modules\Microsoft.WSMan.Management"
        "$($fullSymbolsFolder)\Modules\Microsoft.WSMan.Management\WSMan.format.ps1xml" = "Modules\Microsoft.WSMan.Management"
        "$($fullSymbolsFolder)\Modules\PSDiagnostics\PSDiagnostics.ps?1" = "Modules\PSDiagnostics"
      }
    }
    else {
      $itemsToCopy += @{
        "$($fullSymbolsFolder)\pwsh" = ""
      }
    }

    $itemsToExclude = @(
      # This package is retrieved from https://www.github.com/powershell/MarkdownRender
      "$($fullSymbolsFolder)\Microsoft.PowerShell.MarkdownRender.dll"
    )

    Write-Verbose -verbose "recusively copying $($itemsToCopyWithRecurse | out-string) to $filesToSignDirectory"
    Copy-Item -Path $itemsToCopyWithRecurse -Destination $filesToSignDirectory -Recurse -verbose -exclude $itemsToExclude

    foreach($pattern in $itemsToCopy.Keys) {
      $destinationFolder = Join-Path $filesToSignDirectory -ChildPath $itemsToCopy.$pattern
      $null = New-Item -ItemType Directory -Path $destinationFolder -Force
      Write-Verbose -verbose "copying $pattern to $destinationFolder"
      Copy-Item -Path $pattern -Destination $destinationFolder -Recurse -verbose
    }
  displayName: 'Prepare files to be signed'

- template: EsrpSign.yml@ComplianceRepo
  parameters:
      buildOutputPath: $(System.ArtifactsDirectory)\toBeSigned
      signOutputPath: $(System.ArtifactsDirectory)\signed
      certificateId: "$(AUTHENTICODE_CERT)"
      pattern: |
        **\*.dll
        **\*.psd1
        **\*.psm1
        **\*.ps1xml
        **\*.ps1
        **\*.exe
      useMinimatch: true
      shouldSign: $(SHOULD_SIGN)
      displayName: Authenticode sign our binaries

- pwsh: |
    Import-Module $(PowerShellRoot)/build.psm1 -Force
    Import-Module $(PowerShellRoot)/tools/packaging -Force
    $signedFilesPath = '$(System.ArtifactsDirectory)\signed\'
    $BuildPath = '$(BinPath)'
    Write-Verbose -Verbose -Message "BuildPath: $BuildPath"

    Update-PSSignedBuildFolder -BuildPath $BuildPath -SignedFilesPath $SignedFilesPath
    $dlls = Get-ChildItem $BuildPath\*.dll, $BuildPath\*.exe -Recurse
    $signatures = $dlls | Get-AuthenticodeSignature
    $missingSignatures = $signatures | Where-Object { $_.status -eq 'notsigned' -or $_.SignerCertificate.Issuer -notmatch '^CN=Microsoft.*'}| select-object -ExpandProperty Path

    Write-Verbose -verbose "to be signed:`r`n $($missingSignatures | Out-String)"

    $filesToSignDirectory = "$(System.ArtifactsDirectory)\thirdPartyToBeSigned"
    if (Test-Path $filesToSignDirectory) {
      Remove-Item -Path $filesToSignDirectory -Recurse -Force
    }

    $null = New-Item -ItemType Directory -Path $filesToSignDirectory -Force -Verbose

    $signedFilesDirectory = "$(System.ArtifactsDirectory)\thirdPartySigned"
    if (Test-Path $signedFilesDirectory) {
      Remove-Item -Path $signedFilesDirectory -Recurse -Force
    }

    $null = New-Item -ItemType Directory -Path $signedFilesDirectory -Force -Verbose

    $missingSignatures | ForEach-Object {
      $pathWithoutLeaf = Split-Path $_
      $relativePath = $pathWithoutLeaf.replace($BuildPath,'')
      Write-Verbose -Verbose -Message "relativePath: $relativePath"
      $targetDirectory = Join-Path -Path $filesToSignDirectory -ChildPath $relativePath
      Write-Verbose -Verbose -Message "targetDirectory: $targetDirectory"
      if(!(Test-Path $targetDirectory))
      {
        $null = New-Item -ItemType Directory -Path $targetDirectory -Force -Verbose
      }
      Copy-Item -Path $_ -Destination $targetDirectory
    }

  displayName: Create ThirdParty Signing Folder
  condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'true'))

- template: EsrpSign.yml@ComplianceRepo
  parameters:
      buildOutputPath: $(System.ArtifactsDirectory)\thirdPartyToBeSigned
      signOutputPath: $(System.ArtifactsDirectory)\thirdPartySigned
      certificateId: "CP-231522"
      pattern: |
        **\*.dll
      useMinimatch: true
      shouldSign: $(SHOULD_SIGN)
      displayName: Sign ThirdParty binaries

- pwsh: |
    Get-ChildItem '$(System.ArtifactsDirectory)\thirdPartySigned\*'
  displayName: Capture ThirdParty Signed files
  condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'true'))

- pwsh: |
    Import-Module '$(PowerShellRoot)/build.psm1' -Force
    Import-Module '$(PowerShellRoot)/tools/packaging' -Force
    $signedFilesPath = '$(System.ArtifactsDirectory)\thirdPartySigned'
    $BuildPath = '$(BinPath)'

    Update-PSSignedBuildFolder -BuildPath $BuildPath -SignedFilesPath $SignedFilesPath
    if ($env:BuildConfiguration -eq 'minSize') {
      ## Remove XML files when making a min-size package.
      Remove-Item "$BuildPath/*.xml" -Force
    }
  displayName: Merge ThirdParty signed files with Build
  condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'true'))

- pwsh: |
      $uploadFolder = '$(BinPath)'
      $containerName = '$(signedArtifactContainer)'

      Write-Verbose -Verbose "File permissions after signing"
      Get-ChildItem $uploadFolder\pwsh | Select-Object -Property 'unixmode', 'size', 'name'

      $uploadTarFilePath = Join-Path '$(System.ArtifactsDirectory)' '$(signedBuildArtifactName)'
      Write-Verbose -Verbose -Message "Creating tar.gz - $uploadTarFilePath"
      tar -czvf $uploadTarFilePath -C $uploadFolder *

      Get-ChildItem '$(System.ArtifactsDirectory)' | Out-String | Write-Verbose -Verbose

      Write-Host "##vso[artifact.upload containerfolder=$containerName;artifactname=$containerName]$uploadTarFilePath"
  displayName: Upload signed tar.gz files to artifacts
  condition: eq(variables['ArtifactPlatform'], 'linux')
  retryCountOnTaskFailure: 2


- pwsh: |
      $uploadFolder = '$(BinPath)'
      $containerName = '$(signedArtifactContainer)'

      Get-ChildItem $uploadFolder -Recurse | Out-String | Write-Verbose -Verbose

      $uploadZipFilePath = Join-Path '$(System.ArtifactsDirectory)' 'PowerShell-$(Version)$(signedBuildArtifactName)'
      Write-Verbose -Verbose -Message "Creating zip - $uploadZipFilePath"
      Compress-Archive -Path $uploadFolder/* -DestinationPath $uploadZipFilePath -Verbose

      Get-ChildItem '$(System.ArtifactsDirectory)' | Out-String | Write-Verbose -Verbose

      Write-Host "##vso[artifact.upload containerfolder=$containerName;artifactname=$containerName]$uploadZipFilePath"
  displayName: Upload signed zip files to artifacts
  condition: eq(variables['ArtifactPlatform'], 'windows')
  retryCountOnTaskFailure: 2


- template: /tools/releaseBuild/azureDevOps/templates/step/finalize.yml
