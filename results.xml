<?xml version="1.0" encoding="utf-8" standalone="no"?>
<testsuites xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="junit_schema_4.xsd" name="Pester" tests="122" errors="0" failures="5" disabled="15" time="60.510">
  <testsuite name="./test/powershell/Host/ConsoleHost.Tests.ps1" tests="142" errors="0" failures="5" hostname="TravissBP142023" id="0" skipped="15" disabled="0" package="./test/powershell/Host/ConsoleHost.Tests.ps1" time="60.510">
    <properties>
      <property name="clr-version" value="Unknown" />
      <property name="machine-name" value="TravissBP142023" />
      <property name="platform" value="Darwin" />
      <property name="junit-version" value="4" />
      <property name="cwd" value="/Users/travisplunk/git/PowerShell" />
      <property name="user" value="travisplunk" />
      <property name="os-version" value="24.3.0" />
      <property name="user-domain" value="" />
    </properties>
    <testcase name="minishell for native executables.Streams from minishell.gets a hashtable object from minishell" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.492" />
    <testcase name="minishell for native executables.Streams from minishell.gets the error stream from minishell" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.559" />
    <testcase name="minishell for native executables.Streams from minishell.gets the information stream from minishell" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.454" />
    <testcase name="minishell for native executables.Streams to minishell.passes input into minishell" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.367" />
    <testcase name="ConsoleHost unit tests.Clear-Host does not injects data into PowerShell output stream" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.075" />
    <testcase name="ConsoleHost unit tests.ShellInterop.Verify Parsing Error Output Format Single Shell should throw exception" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.023" />
    <testcase name="ConsoleHost unit tests.ShellInterop.Verify Validate Output Format As Text Explicitly Child Single Shell does not throw" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.393" />
    <testcase name="ConsoleHost unit tests.ShellInterop.Verify Parsing Error Input Format Single Shell should throw exception" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.002" />
    <testcase name="ConsoleHost unit tests.CommandLine.simple -args" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.341" />
    <testcase name="ConsoleHost unit tests.CommandLine.array -args" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.625" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '--help' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.150" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '-help' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.146" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '-h' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.147" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '-?' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.151" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '--he' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.146" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '-hel' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.147" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '--HELP' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.145" />
    <testcase name="ConsoleHost unit tests.CommandLine.Accepts '-hEl' as a parameter for help" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.147" />
    <testcase name="ConsoleHost unit tests.CommandLine.Should accept a Base64 encoded command" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.920" />
    <testcase name="ConsoleHost unit tests.CommandLine.-Version should return the engine version using: -version &lt;empty&gt;" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.170" />
    <testcase name="ConsoleHost unit tests.CommandLine.-Version should return the engine version using: -version 2" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.146" />
    <testcase name="ConsoleHost unit tests.CommandLine.-Version should return the engine version using: -version -command 1-1" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.147" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be default parameter" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.385" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File accepts scripts with .ps1 extension" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.311" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File accepts scripts without .ps1 extension to support shebang" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.318" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should fail for script without .ps1 extension" status="Skipped" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.000">
      <skipped message="" />
    </testcase>
    <testcase name="ConsoleHost unit tests.CommandLine.-File should pass additional arguments to script" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.324" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to parameters: $truE" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.327" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to parameters: $falSe" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.319" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to parameters: trUe" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.327" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to parameters: faLse" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.324" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to positional parameters: $tRue" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.324" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to positional parameters: $falSe" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.321" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to positional parameters: tRUe" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.317" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as string to positional parameters: fALse" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.323" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as bool to switches: $tRue" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.328" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as bool to switches: $faLse" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.328" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as bool to switches: tRue" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.331" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should be able to pass bool string values as bool to switches: fAlse" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.334" />
    <testcase name="ConsoleHost unit tests.CommandLine.-File should return exit code from script" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="1.232" />
    <testcase name="ConsoleHost unit tests.CommandLine.A single dash should be passed as an arg" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.720" />
    <testcase name="ConsoleHost unit tests.CommandLine.Missing command should fail" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.147" />
    <testcase name="ConsoleHost unit tests.CommandLine.Empty space command should succeed on non-Windows" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.316" />
    <testcase name="ConsoleHost unit tests.CommandLine.Whitespace command should succeed" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.308" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Doesn't run the login profile when -Login not used" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.337" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Doesn't falsely recognise -Login when elsewhere in the invocation" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.456" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Doesn't falsely recognise -Login when used after -Command" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.443" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -l switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.422" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -L switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.347" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -login switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.349" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -Login switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.353" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -LOGIN switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.447" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Accepts the -log switch for -Login and behaves correctly" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.355" />
    <testcase name="ConsoleHost unit tests.-Login pwsh switch.Starts as a login shell with '-' prepended to name" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.354" />
    <testcase name="ConsoleHost unit tests.-SettingsFile Commandline switch.Verifies PowerShell reads from the custom -settingsFile" status="Skipped" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.000">
      <skipped message="" />
    </testcase>
    <testcase name="ConsoleHost unit tests.-SettingsFile Commandline switch.Verifies PowerShell writes to the custom -settingsFile" status="Skipped" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.000">
      <skipped message="" />
    </testcase>
    <testcase name="ConsoleHost unit tests.-SettingsFile Commandline switch.Verify PowerShell removes a setting from the custom -settingsFile" status="Skipped" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.000">
      <skipped message="" />
    </testcase>
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.xml input" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.684" />
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.text input" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.321" />
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.xml output" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.623" />
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.text output" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.350" />
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.errors are in text if error is redirected, encoded command, non-interactive, and outputformat specified" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.445" />
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.Progress is not emitted when stdout is redirected" status="Failed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="1.221">
      <failure message="Expected $false, but got $true." />
    </testcase>
    <testcase name="ConsoleHost unit tests.Pipe to/from powershell.Progress is still emitted with redireciton with XML output" status="Failed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.672">
      <failure message="Expected $false, but got $true." />
    </testcase>
    <testcase name="ConsoleHost unit tests.Redirected standard output.Simple redirected output" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.384" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ implicit -Command w/ -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.337" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ implicit -Command w/o -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.325" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ explicit -Command w/ -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.321" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ explicit -Command w/o -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.319" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ -File w/ -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.329" />
    <testcase name="ConsoleHost unit tests.Input redirected but not reading from stdin (not really interactive).Redirected input w/ -File w/o -NonInteractive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.324" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Interactive redirected input: &lt;empty&gt;" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.626" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Interactive redirected input:  -IntERactive" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.569" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Interactive redirected input:  -i" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.565" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Interactive redirected input w/ initial command" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.572" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Redirected input explicit prompting (-File -)" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.564" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Redirected input no prompting (-Command -)" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.591" />
    <testcase name="ConsoleHost unit tests.Redirected standard input for 'interactive' use.Redirected input w/ nested prompt" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.607" />
    <testcase name="ConsoleHost unit tests.Exception handling.Should handle a CallDepthOverflow" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="0.023" />
    <testcase name="ConsoleHost unit tests.Data, Config, and Cache locations.Should start if Data, Config, and Cache location is not accessible" status="Passed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="7.779" />
    <testcase name="ConsoleHost unit tests.HOME environment variable.Should start if HOME is not defined" status="Failed" classname="./test/powershell/Host/ConsoleHost.Tests.ps1" assertions="0" time="3.003">
      <failure message="