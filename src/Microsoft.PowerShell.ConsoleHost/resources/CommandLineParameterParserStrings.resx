<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandAlreadySpecified" xml:space="preserve">
    <value>Cannot process command because a command is already specified with -Command, -CommandWithArgs, or -EncodedCommand.</value>
  </data>
  <data name="MissingCommandParameter" xml:space="preserve">
    <value>Cannot process the command because of a missing parameter. A command must follow -Command.</value>
  </data>
  <data name="UnknownParameter" xml:space="preserve">
    <value>Unrecognized parameter: '{0}'.</value>
  </data>
  <data name="TooManyParametersToCommand" xml:space="preserve">
    <value>'-' was specified with the -Command parameter; no other arguments to -Command are permitted.</value>
  </data>
  <data name="StdinNotRedirected" xml:space="preserve">
    <value>'-' was specified as the argument to -Command but standard input has not been redirected for this process.</value>
  </data>
  <data name="MissingOutputFormatParameter" xml:space="preserve">
    <value>The command cannot be run because no argument has been supplied for the OutputFormat parameter.
Specify one of the following formats for this parameter:
{0}</value>
  </data>
  <data name="MissingInputFormatParameter" xml:space="preserve">
    <value>Cannot process the command because the -InputFormat parameter requires an argument. Specify a valid format argument for this parameter.
Valid formats are:
{0}</value>
  </data>
  <data name="BadFormatParameterValue" xml:space="preserve">
    <value>Cannot process the command because of an incorrect parameter value. "{0}" is not a valid format.
Valid formats are:
{1}</value>
  </data>
  <data name="ArgsAlreadySpecified" xml:space="preserve">
    <value>Cannot process the command because arguments to -Command or -EncodedCommand have already been specified with -EncodedArguments.</value>
  </data>
  <data name="MissingArgsValue" xml:space="preserve">
    <value>Cannot process the command because -EncodedArguments requires a value. Specify a value for the -EncodedArguments parameter.</value>
  </data>
  <data name="MissingFileArgument" xml:space="preserve">
    <value>The command cannot be run because the File parameter requires a file path. Supply a path for the File parameter and then try the command again.</value>
  </data>
  <data name="MissingWindowStyleArgument" xml:space="preserve">
    <value>Cannot process the command because -WindowStyle requires an argument that is normal, hidden, minimized or maximized. Specify one of these argument values and try again.</value>
  </data>
  <data name="InvalidFileArgument" xml:space="preserve">
    <value>Processing -File '{0}' failed: {1} Specify a valid path for the -File parameter.</value>
  </data>
  <data name="InvalidWindowStyleArgument" xml:space="preserve">
    <value>Processing -WindowStyle '{0}' failed: {1}.</value>
  </data>
  <data name="InvalidFileArgumentExtension" xml:space="preserve">
    <value>Processing -File '{0}' failed because the file does not have a '.ps1' extension. Specify a valid PowerShell script file name, and then try again.</value>
  </data>
  <data name="ArgumentFileDoesNotExist" xml:space="preserve">
    <value>The argument '{0}' is not recognized as the name of a script file. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</value>
  </data>
  <data name="BadArgsValue" xml:space="preserve">
    <value>Cannot process the command because the value specified with -EncodedArguments is not properly encoded. The value must be Base64 encoded.</value>
  </data>
  <data name="BadCommandValue" xml:space="preserve">
    <value>Cannot process the command because the value specified with -EncodedCommand is not properly encoded. The value must be Base64 encoded.</value>
  </data>
  <data name="MissingExecutionPolicyParameter" xml:space="preserve">
    <value>Cannot process the execution policy because of a missing policy name. A policy name must follow -ExecutionPolicy.</value>
  </data>
  <data name="MtaStaMutuallyExclusive" xml:space="preserve">
    <value>Cannot process the command because -STA and -MTA are both specified. Specify either -STA or -MTA.</value>
  </data>
  <data name="MissingConfigurationNameArgument" xml:space="preserve">
    <value>Cannot process the command because -ConfigurationName requires an argument that is a remote endpoint configuration name. Specify this argument and try again.</value>
  </data>
  <data name="MissingConfigurationFileArgument" xml:space="preserve">
    <value>Cannot process the command because -ConfigurationFile requires an argument that is a session configuration (.pssc) file path. Specify this argument and try again.</value>
  </data>
  <data name="MissingCustomPipeNameArgument" xml:space="preserve">
    <value>Cannot process the command because -CustomPipeName requires an argument that is a name of the pipe you want to use. Specify this argument and try again.</value>
  </data>
  <data name="CustomPipeNameTooLong" xml:space="preserve">
    <value>Cannot process the command because -CustomPipeName specified is too long. Pipe names on this platform can be up to {0} characters long. Your pipe name '{1}' is {2} characters.</value>
  </data>
  <data name="MissingSettingsFileArgument" xml:space="preserve">
    <value>Cannot process the command because -SettingsFile requires an argument that is a file path.</value>
  </data>
  <data name="InvalidSettingsFileArgument" xml:space="preserve">
    <value>Processing -SettingsFile '{0}' failed: {1}. Specify a valid path for the -SettingsFile parameter.</value>
  </data>
  <data name="SettingsFileNotExists" xml:space="preserve">
    <value>The argument '{0}' passed to the -SettingsFile does not exist. Provide the path to an existing json file as an argument to the -SettingsFile parameter.</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>Invalid argument '{0}', did you mean:</value>
  </data>
  <data name="WindowStyleArgumentNotImplemented" xml:space="preserve">
    <value>Parameter -WindowStyle is not implemented on this platform.</value>
  </data>
  <data name="MissingWorkingDirectoryArgument" xml:space="preserve">
    <value>Cannot process the command because -WorkingDirectory requires an argument that is a directory path.</value>
  </data>
  <data name="MTANotImplemented" xml:space="preserve">
    <value>Parameter -MTA is not supported on this platform.</value>
  </data>
  <data name="STANotImplemented" xml:space="preserve">
    <value>Parameter -STA is not supported on this platform.</value>
  </data>
  <data name="NullElementInArgs" xml:space="preserve">
    <value>The specified arguments must not contain null elements.</value>
  </data>
  <data name="InvalidExecutionPolicyArgument" xml:space="preserve">
    <value>Invalid ExecutionPolicy value '{0}'.</value>
  </data>
</root>
