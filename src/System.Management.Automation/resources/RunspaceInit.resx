<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnabledExperimentalFeatures" xml:space="preserve">
    <value>Variable to hold the enabled experimental feature names</value>
  </data>
  <data name="PSHOMEDescription" xml:space="preserve">
    <value>Parent folder of the host application of the current runspace</value>
  </data>
  <data name="HOMEDescription" xml:space="preserve">
    <value>Folder containing the current user's profile</value>
  </data>
  <data name="PSHostDescription" xml:space="preserve">
    <value>A reference to the host of the current runspace</value>
  </data>
  <data name="ExecutionContextDescription" xml:space="preserve">
    <value>The run objects available to cmdlets</value>
  </data>
  <data name="PSVersionTableDescription" xml:space="preserve">
    <value>Version information for current PowerShell session</value>
  </data>
  <data name="PIDDescription" xml:space="preserve">
    <value>Current process ID</value>
  </data>
  <data name="DollarHookDescription" xml:space="preserve">
    <value>Status of last command</value>
  </data>
  <data name="PPIDDescription" xml:space="preserve">
    <value>Parent process ID</value>
  </data>
  <data name="MshShellIdDescription" xml:space="preserve">
    <value>The ShellID identifies the current shell.  This is used by #Requires.</value>
  </data>
  <data name="ConsoleDescription" xml:space="preserve">
    <value>Name of the current console file</value>
  </data>
  <data name="OutputEncodingDescription" xml:space="preserve">
    <value>The text encoding used when piping text to a native executable file</value>
  </data>
  <data name="PSStyleDescription" xml:space="preserve">
    <value>Configuration controlling how text is rendered.</value>
  </data>
  <data name="PSEmailServerDescription" xml:space="preserve">
    <value>Variable to contain the name of the email server. This can be used instead of the HostName parameter in the Send-MailMessage cmdlet.</value>
  </data>
  <data name="ConfirmPreferenceDescription" xml:space="preserve">
    <value>Dictates when confirmation should be requested. Confirmation is requested when the ConfirmImpact of the operation is equal to or greater than $ConfirmPreference. If $ConfirmPreference is None, actions will only be confirmed when Confirm is specified.</value>
  </data>
  <data name="DebugPreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when a Debug message is delivered</value>
  </data>
  <data name="ErrorActionPreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when an error message is delivered</value>
  </data>
  <data name="ProgressPreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when progress records are delivered</value>
  </data>
  <data name="VerbosePreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when a Verbose message is delivered</value>
  </data>
  <data name="WarningPreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when a Warning message is delivered</value>
  </data>
  <data name="InformationPreferenceDescription" xml:space="preserve">
    <value>Dictates the action taken when a command generates an item in the Information stream</value>
  </data>
  <data name="ErrorViewDescription" xml:space="preserve">
    <value>Dictates the view mode to use when displaying errors</value>
  </data>
  <data name="NestedPromptLevelDescription" xml:space="preserve">
    <value>Dictates what type of prompt should be displayed for the current nesting level</value>
  </data>
  <data name="PSNativeCommandUseErrorActionPreferenceDescription" xml:space="preserve">
    <value>If true, $ErrorActionPreference applies to native executables, so that non-zero exit codes will generate cmdlet-style errors governed by error action settings</value>
  </data>
  <data name="WhatIfPreferenceDescription" xml:space="preserve">
    <value>If true, WhatIf is considered to be enabled for all commands.</value>
  </data>
  <data name="NativeCommandArgumentPassingDescription" xml:space="preserve">
    <value>Dictates how arguments are passed to native executables.</value>
  </data>
  <data name="FormatEnumerationLimitDescription" xml:space="preserve">
    <value>Dictates the limit of enumeration on formatting IEnumerable objects</value>
  </data>
  <data name="ReportErrorShowStackTraceDescription" xml:space="preserve">
    <value>Displays errors with a stack trace</value>
  </data>
  <data name="ReportErrorShowInnerExceptionDescription" xml:space="preserve">
    <value>Displays errors with inner exceptions</value>
  </data>
  <data name="ReportErrorShowSourceDescription" xml:space="preserve">
    <value>Displays errors with their sources</value>
  </data>
  <data name="ReportErrorShowExceptionClassDescription" xml:space="preserve">
    <value>Displays errors with a description of the error class</value>
  </data>
  <data name="DollarPSCultureDescription" xml:space="preserve">
    <value>Culture of the current PowerShell session</value>
  </data>
  <data name="DollarPSUICultureDescription" xml:space="preserve">
    <value>UI culture of the current PowerShell session</value>
  </data>
  <data name="PSDefaultParameterValuesDescription" xml:space="preserve">
    <value>Variable to hold all default &lt;cmdlet:parameter, value&gt; pairs</value>
  </data>
  <data name="PauseDefinitionString" xml:space="preserve">
    <value>Press Enter to continue...</value>
  </data>
  <data name="PSEditionDescription" xml:space="preserve">
    <value>Edition information for the current PowerShell session</value>
  </data>
</root>
