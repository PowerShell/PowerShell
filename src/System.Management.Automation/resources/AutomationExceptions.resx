<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Argument" xml:space="preserve">
    <value>Cannot process argument because the value of argument "{0}" is not valid. Change the value of the "{0}" argument and run the operation again.</value>
  </data>
  <data name="InvalidScopeIdArgument" xml:space="preserve">
    <value>Cannot process argument because the value of parameter "{0}" is not valid. Valid values are "Global", "Local", or "Script", or a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent). Change the value of the "{0}" parameter and run the operation again.</value>
  </data>
  <data name="ArgumentNull" xml:space="preserve">
    <value>Cannot process argument because the value of argument "{0}" is null. Change the value of argument "{0}" to a non-null value.</value>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>Cannot process argument because the value of argument "{0}" is out of range. Change argument "{0}" to a value that is within range.</value>
  </data>
  <data name="InvalidOperation" xml:space="preserve">
    <value>Cannot perform operation because operation "{0}" is not valid. Remove operation "{0}", or investigate why it is not valid.</value>
  </data>
  <data name="NotImplemented" xml:space="preserve">
    <value>Cannot perform operation because operation "{0}" is not implemented.</value>
  </data>
  <data name="NotSupported" xml:space="preserve">
    <value>Cannot perform operation because operation "{0}" is not supported.</value>
  </data>
  <data name="ObjectDisposed" xml:space="preserve">
    <value>Cannot perform operation because object "{0}" has already been disposed.</value>
  </data>
  <data name="ScriptBlockInvokeOnOneClauseOnly" xml:space="preserve">
    <value>The script block cannot be invoked because it contains more than one clause. The Invoke() method can only be used on script blocks that contain a single clause.</value>
  </data>
  <data name="CanConvertOneClauseOnly" xml:space="preserve">
    <value>The script block cannot be converted because it contains more than one clause. Expressions or control structures are not permitted. Verify that the script block contains exactly one pipeline or command.</value>
  </data>
  <data name="CantConvertEmptyPipeline" xml:space="preserve">
    <value>An empty script block cannot be converted. Verify that the script block contains exactly one pipeline or command.</value>
  </data>
  <data name="CanOnlyConvertOnePipeline" xml:space="preserve">
    <value>Only a script block that contains exactly one pipeline or command can be converted. Expressions or control structures are not permitted. Verify that the script block contains exactly one pipeline or command.</value>
  </data>
  <data name="CantConvertScriptBlockWithTrap" xml:space="preserve">
    <value>A script block that contains a top-level trap statement cannot be converted.</value>
  </data>
  <data name="CantConvertWithUndeclaredVariables" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock dereferencing variables undeclared in the param(...) block.  Name of undeclared variable: {0}.</value>
  </data>
  <data name="CantConvertWithNonConstantExpression" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock evaluating non-constant expressions. Non-constant expression: {0}.</value>
  </data>
  <data name="CantConvertWithDynamicExpression" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock evaluating dynamic expressions. Dynamic expression: {0}.</value>
  </data>
  <data name="CantConvertWithScriptBlocks" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock that tries to pass other script blocks inside argument values.</value>
  </data>
  <data name="CantConvertWithCommandInvocations" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock which invokes pipelines, commands or functions to evaluate arguments of the main pipeline.</value>
  </data>
  <data name="CantConvertWithDotSourcing" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock that uses dot sourcing.</value>
  </data>
  <data name="CantConvertWithScriptBlockInvocation" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock that invokes other script blocks.</value>
  </data>
  <data name="CanConvertOneOutputErrorRedir" xml:space="preserve">
    <value>The script block cannot be converted to a PowerShell object because it contains forbidden redirection operators.</value>
  </data>
  <data name="CantConvertScriptBlockWithNoContext" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock that does not have an associated operation context.</value>
  </data>
  <data name="HaltCommandException" xml:space="preserve">
    <value>The command was stopped by the user.</value>
  </data>
  <data name="DynamicParametersWrongType" xml:space="preserve">
    <value>Object "{0}" is the wrong type to return from the dynamicparam block. The dynamicparam block must return either $null, or an object with type [System.Management.Automation.RuntimeDefinedParameterDictionary].</value>
  </data>
  <data name="CantConvertScriptBlockToOpenGenericType" xml:space="preserve">
    <value>The script block cannot be converted to an open generic type. Define an appropriate closed generic type, and then retry.</value>
  </data>
  <data name="CantConvertPipelineStartsWithExpression" xml:space="preserve">
    <value>Cannot generate a PowerShell object for a ScriptBlock that starts a pipeline with an expression.</value>
  </data>
  <data name="UsingVariableIsUndefined" xml:space="preserve">
    <value>The value of the using variable '$using:{0}' cannot be retrieved because it has not been set in the local session.</value>
  </data>
  <data name="CantGetUsingExpressionValueWithSpecifiedVariableDictionary" xml:space="preserve">
    <value>Cannot get the value of the Using expression '{0}' in the specified variable dictionary. When creating a PowerShell instance from a script block, the Using expression cannot contain an indexing operation or member-accessing operation.</value>
  </data>
  <data name="WDACCompiledScriptBlockLogTitle" xml:space="preserve">
    <value>Compiled Script Block Dot Source</value>
  </data>
  <data name="WDACCompiledScriptBlockLogMessage" xml:space="preserve">
    <value>Script block '{0}' invocation into current scope will be disallowed in Constrained Language mode. Script language mode: {1}, Context language mode: {2}.</value>
  </data>
</root>
