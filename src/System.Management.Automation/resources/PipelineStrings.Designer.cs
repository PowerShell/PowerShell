//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Management.Automation
{
    using System;
    using System.Reflection;
    using System.Resources;
    using System.Globalization;

    internal class PipelineStrings
    {
        private static ResourceManager resourceMan;
        private static CultureInfo resourceCulture;

        internal PipelineStrings() { }

        internal static ResourceManager ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    resourceMan = new ResourceManager("System.Management.Automation.resources.PipelineStrings", typeof(PipelineStrings).GetTypeInfo().Assembly);
                }
                return resourceMan;
            }
        }

        internal static CultureInfo Culture
        {
            get { return resourceCulture; }
            set { resourceCulture = value; }
        }

        internal static string CommandProcessorAlreadyUsed => ResourceManager.GetString("CommandProcessorAlreadyUsed", resourceCulture);
        internal static string ExecutionAlreadyStarted => ResourceManager.GetString("ExecutionAlreadyStarted", resourceCulture);
        internal static string ActionPreferenceStop => ResourceManager.GetString("ActionPreferenceStop", resourceCulture);
        internal static string FirstCommandCannotHaveInput => ResourceManager.GetString("FirstCommandCannotHaveInput", resourceCulture);
        internal static string InvalidCommandNumber => ResourceManager.GetString("InvalidCommandNumber", resourceCulture);
        internal static string PipeAlreadyTaken => ResourceManager.GetString("PipeAlreadyTaken", resourceCulture);
        internal static string PipelineExecuteRequiresAtLeastOneCommand => ResourceManager.GetString("PipelineExecuteRequiresAtLeastOneCommand", resourceCulture);
        internal static string PipelineNotStarted => ResourceManager.GetString("PipelineNotStarted", resourceCulture);
        internal static string WriteNotPermitted => ResourceManager.GetString("WriteNotPermitted", resourceCulture);
        internal static string SecondFailure => ResourceManager.GetString("SecondFailure", resourceCulture);
        internal static string WriteToClosedPipeline => ResourceManager.GetString("WriteToClosedPipeline", resourceCulture);
        internal static string PipelineExecutionInformation => ResourceManager.GetString("PipelineExecutionInformation", resourceCulture);
        internal static string PipelineExecutionNonTerminatingError => ResourceManager.GetString("PipelineExecutionNonTerminatingError", resourceCulture);
        internal static string PipelineExecutionTerminatingError => ResourceManager.GetString("PipelineExecutionTerminatingError", resourceCulture);
        internal static string PipelineExecutionParameterBinding => ResourceManager.GetString("PipelineExecutionParameterBinding", resourceCulture);
        internal static string CannotCreatePipeline => ResourceManager.GetString("CannotCreatePipeline", resourceCulture);
        internal static string ConnectNotSupported => ResourceManager.GetString("ConnectNotSupported", resourceCulture);
        internal static string PipelineNotDisconnected => ResourceManager.GetString("PipelineNotDisconnected", resourceCulture);
        internal static string InvalidRemoteCommand => ResourceManager.GetString("InvalidRemoteCommand", resourceCulture);
    }
}
