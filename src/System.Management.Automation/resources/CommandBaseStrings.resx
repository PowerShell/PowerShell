<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ShouldContinuePromptCaption" xml:space="preserve">
    <value>Continue with this operation?</value>
  </data>
  <data name="ContinueOneLabel" xml:space="preserve">
    <value>&amp;Yes</value>
  </data>
  <data name="ContinueOneHelpMessage" xml:space="preserve">
    <value>Continue with only the next step of the operation.</value>
  </data>
  <data name="ContinueAllLabel" xml:space="preserve">
    <value>Yes to &amp;All</value>
  </data>
  <data name="ContinueAllHelpMessage" xml:space="preserve">
    <value>Continue with all the steps of the operation.</value>
  </data>
  <data name="SkipOneLabel" xml:space="preserve">
    <value>&amp;No</value>
  </data>
  <data name="SkipOneHelpMessage" xml:space="preserve">
    <value>Skip this operation and proceed with the next operation.</value>
  </data>
  <data name="SkipAllLabel" xml:space="preserve">
    <value>No to A&amp;ll</value>
  </data>
  <data name="SkipAllHelpMessage" xml:space="preserve">
    <value>Skip this operation and all subsequent operations.</value>
  </data>
  <data name="HaltHelpMessage" xml:space="preserve">
    <value>Stop this command.</value>
  </data>
  <data name="HaltLabel" xml:space="preserve">
    <value>&amp;Halt Command</value>
  </data>
  <data name="PauseLabel" xml:space="preserve">
    <value>&amp;Suspend</value>
  </data>
  <data name="PauseHelpMessage" xml:space="preserve">
    <value>Pause the current pipeline and return to the command prompt. Type "{0}" to resume the pipeline.</value>
  </data>
  <data name="ProgramExitedWithNonZeroCode" xml:space="preserve">
    <!-- NOTE:
      This string was added for the native command error action preference integration feature.
      ParserStrings already declares a ProgramFailedToExecute string,
      however that is used for ApplicationFailedExceptions thrown when the NativeCommandProcessor fails in an unexpected way.
      In this case, we have a more specific error for the native command scenario, so the two are not conflated.
    -->
    <value>Program "{0}" ended with non-zero exit code: {1}.</value>
  </data>
  <data name="ShouldProcessMessage" xml:space="preserve">
    <value>Performing the operation "{0}" on target "{1}".</value>
  </data>
  <data name="ShouldProcessWhatIfMessage" xml:space="preserve">
    <value>What if: {0}</value>
  </data>
  <data name="ShouldProcessWarningFallback" xml:space="preserve">
    <value>Are you sure you want to perform this action?
{0}</value>
  </data>
  <data name="InquireCaptionDefault" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="ErrorPreferenceStop" xml:space="preserve">
    <value>The running command stopped because the preference variable "{0}" or common parameter is set to Stop: {1}</value>
  </data>
  <data name="PreferenceStop" xml:space="preserve">
    <value>The running command stopped because the preference variable "{0}" or common parameter is set to Stop.</value>
  </data>
  <data name="PreferenceInvalid" xml:space="preserve">
    <value>The running command stopped because the preference variable "{0}" or common parameter is set to the following value that is not valid: "{1}".</value>
  </data>
  <data name="InquireHalt" xml:space="preserve">
    <value>The running command stopped because the user selected the Stop option.</value>
  </data>
  <data name="InquireCtrlC" xml:space="preserve">
    <value>The running command stopped because the user interrupted the command.</value>
  </data>
  <data name="CannotInvokePSCmdletsDirectly" xml:space="preserve">
    <value>Cmdlets derived from PSCmdlet cannot be invoked directly.  </value>
  </data>
  <data name="ParameterNotValidInRemoteRunspace" xml:space="preserve">
    <value>Cmdlet '{0}' does not support parameter '{1}' in a remote session.</value>
  </data>
  <data name="PagingSupportAccurateTotalCountTemplate" xml:space="preserve">
    <value>Total count: {0}</value>
    <comment>{0} is a placeholder for an integer number.

Reviewed by TArcher on 2010-07-20</comment>
  </data>
  <data name="PagingSupportEstimatedTotalCountTemplate" xml:space="preserve">
    <value>Estimated total count: {0}</value>
    <comment>{0} is a placeholder for an integer number

Reviewed by TArcher on 2010-07-20
</comment>
  </data>
  <data name="PagingSupportUnknownTotalCountTemplate" xml:space="preserve">
    <value>Unknown total count</value>
    <comment>Reviewed by TArcher on 2010-07-20</comment>
  </data>
  <data name="ObsoleteCommand" xml:space="preserve">
    <value>command '{0}'</value>
  </data>
  <data name="UseOfDeprecatedCommandWarning" xml:space="preserve">
    <value>The {0} is obsolete. {1}</value>
  </data>
  <data name="ExecFailed" xml:space="preserve">
    <value>Exec call failed with errorno {0} for command line: {1}</value>
  </data>
  <data name="NativeCommandNotFound" xml:space="preserve">
    <value>Command '{0}' was not found. The specified command must be an executable.</value>
  </data>
  <data name="WDACLogTitle" xml:space="preserve">
    <value>Script Block Processing Dot-Source Check</value>
  </data>
  <data name="WDACLogMessage" xml:space="preserve">
    <value>Dot-Source processing for script block '{0}' will fail in Constrained Language mode because its language mode '{1}' does not match the current language mode '{2}'.</value>
  </data>
  <data name="SearcherWDACLogTitle" xml:space="preserve">
    <value>Command Searcher</value>
  </data>
  <data name="SearcherWDACLogMessage" xml:space="preserve">
    <value>Command '{0}' in module '{1}' is untrusted and will not be accessible in ConstrainedLanguage mode.</value>
  </data>
</root>
