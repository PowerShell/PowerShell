<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LineLessThanOne" xml:space="preserve">
    <value>Line cannot be less than 1.</value>
  </data>
  <data name="BreakpointIdNotFound" xml:space="preserve">
    <value>There is no breakpoint with ID '{0}'.</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' does not exist.</value>
  </data>
  <data name="WrongExtension" xml:space="preserve">
    <value>Cannot set breakpoint on file '{0}'; only *.ps1 and *.psm1 files are valid.</value>
  </data>
  <data name="RemoteDebuggerNotSupported" xml:space="preserve">
    <value>Debugging is not supported on remote sessions.</value>
  </data>
  <data name="CannotSetBreakpointInconsistentLanguageMode" xml:space="preserve">
    <value>Cannot set breakpoint. The language mode for this session is incompatible with the system-wide language mode.</value>
  </data>
  <data name="RemoteDebuggerNotSupportedInHost" xml:space="preserve">
    <value>Breakpoints cannot be set in the remote session because remote debugging is not supported by the current host.</value>
  </data>
  <data name="RunspaceDebuggingCannotDebugDefaultRunspace" xml:space="preserve">
    <value>You cannot debug the default host Runspace using this cmdlet. To debug the default Runspace use the normal debugging commands from the host.</value>
  </data>
  <data name="RunspaceDebuggingNoHostRunspaceOrDebugger" xml:space="preserve">
    <value>Cannot debug Runspace. The host has no debugger. Try debugging the Runspace inside the PowerShell console or with Visual Studio Code, both of which have built-in debuggers.</value>
  </data>
  <data name="RunspaceDebuggingNoHost" xml:space="preserve">
    <value>Cannot debug Runspace. There is no host or host UI. The debugger requires a host and host UI for debugging.</value>
  </data>
  <data name="RunspaceDebuggingTooManyRunspacesFound" xml:space="preserve">
    <value>More than one Runspace was found. Only one Runspace can be debugged at a time.</value>
  </data>
  <data name="RunspaceDebuggingEndSession" xml:space="preserve">
    <value>To end the debugging session type the 'Detach' command at the debugger prompt, or type 'Ctrl+C' otherwise.</value>
  </data>
  <data name="RunspaceDebuggingScriptCompleted" xml:space="preserve">
    <value>Command or script completed.</value>
  </data>
  <data name="RunspaceDebuggingStarted" xml:space="preserve">
    <value>Debugging Runspace: {0}</value>
  </data>
  <data name="RunspaceOptionInvalidRunspaceState" xml:space="preserve">
    <value>Cannot set debug options on Runspace {0} because it is not in the Opened state.</value>
  </data>
  <data name="PersistDebugPreferenceFailure" xml:space="preserve">
    <value>Failed to persist debug options for Process {0}.</value>
  </data>
  <data name="RunspaceOptionNoDebugger" xml:space="preserve">
    <value>No debugger was found for Runspace {0}.</value>
  </data>
  <data name="RunspaceDebuggingNoRunspaceFound" xml:space="preserve">
    <value>No Runspace was found.</value>
  </data>
  <data name="DebugBreakMessage" xml:space="preserve">
    <value>Wait-Debugger called on line {0} in {1}.</value>
  </data>
  <data name="RunspaceInstanceIdNotFound" xml:space="preserve">
    <value>A breakpoint associated with another runspace cannot be updated because there is no runspace with instance ID '{0}'.</value>
  </data>
</root>
