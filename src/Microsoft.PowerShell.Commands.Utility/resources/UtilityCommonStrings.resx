<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Invalidpath" xml:space="preserve">
    <value>{2} has one or more exceptions that are not valid.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>This command cannot be run because the file path '{0}' is not valid. Please provide a valid file path and then run the command.</value>
  </data>
  <data name="EmptyCSSUri" xml:space="preserve">
    <value>This command cannot be run because '{0}' is empty or blank. Please specify CSSUri and then run the command.</value>
  </data>
  <data name="FileOpenError" xml:space="preserve">
    <value>Cannot open the file because the current provider ({0}) cannot open files.</value>
  </data>
  <data name="SearchXMLPrefixNullError" xml:space="preserve">
    <value>This command cannot be run because the prefix value in the Namespace parameter is null. Provide a valid value for the prefix, and then run the command again.</value>
  </data>
  <data name="InvalidOperation" xml:space="preserve">
    <value>The objects grouped by this property cannot be expanded because there is a key duplication. Provide a valid value for the property, and then try again.</value>
  </data>
  <data name="NotSupported" xml:space="preserve">
    <value>The command is not supported on this operating system.</value>
  </data>
  <data name="FileReadError" xml:space="preserve">
    <value>The file '{0}' cannot be read: {1}</value>
  </data>
  <data name="FormatHexTypeNotSupported" xml:space="preserve">
    <value>Cannot convert input of type '{0}' to hexadecimal. To view the hexadecimal formatting of its string representation, pipe it to the Out-String cmdlet before piping it to Format-Hex.</value>
  </data>
  <data name="FormatHexOnlySupportsFileSystemPaths" xml:space="preserve">
    <value>The given path '{0}' is not supported. This command only supports the FileSystem Provider paths.</value>
  </data>
  <data name="FormatHexPathPrefix" xml:space="preserve">
    <value>Path: </value>
  </data>
  <data name="GroupObjectWithHashTable" xml:space="preserve">
    <value>The command cannot be run because the AsString parameter requires that you specify the AsHashtable parameter.</value>
  </data>
  <data name="GroupObjectSingleProperty" xml:space="preserve">
    <value>The command cannot be run because using the AsHashTable parameter with more than one property requires adding the AsString parameter.</value>
  </data>
  <data name="PathDoesNotExist" xml:space="preserve">
    <value>Cannot find path '{0}' because it does not exist.</value>
  </data>
  <data name="PSPrefixReservedInInformationTag" xml:space="preserve">
    <value>Cannot use tag '{0}'. The 'PS' prefix is reserved.</value>
  </data>
  <data name="CouldNotParseAsPowerShellDataFile" xml:space="preserve">
    <value>The file '{0}' could not be parsed as a PowerShell Data File.</value>
  </data>
  <data name="InvalidSDDL" xml:space="preserve">
    <value>Cannot construct a security descriptor from the given SDDL due to the following error: {0}</value>
  </data>
  <data name="IEXWDACLogTitle" xml:space="preserve">
    <value>Invoke-Expression Cmdlet</value>
  </data>
  <data name="IEXWDACLogMessage" xml:space="preserve">
    <value>Invoke-Expression cmdlet script block will be run in ConstrainedLanguage mode.</value>
  </data>
</root>
