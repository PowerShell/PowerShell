<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessDenied" xml:space="preserve">
    <value>Access to the path '{0}' is denied.</value>
  </data>
  <data name="AllowUnencryptedAuthenticationRequired" xml:space="preserve">
    <value>The cmdlet cannot protect plain text secrets sent over unencrypted connections. To suppress this warning and send plain text secrets over unencrypted networks, reissue the command specifying the AllowUnencryptedAuthentication parameter.</value>
  </data>
  <data name="AuthenticationConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Authentication and UseDefaultCredentials. Authentication does not support Default Credentials. Specify either Authentication or UseDefaultCredentials, then retry.</value>
  </data>
  <data name="AuthenticationCredentialNotSupplied" xml:space="preserve">
    <value>The cmdlet cannot run because the following parameter is not specified: Credential. The supplied Authentication type requires a Credential. Specify Credential, then retry.</value>
  </data>
  <data name="AuthenticationTokenNotSupplied" xml:space="preserve">
    <value>The cmdlet cannot run because the following parameter is not specified: Token. The supplied Authentication type requires a Token. Specify Token, then retry.</value>
  </data>
  <data name="AuthenticationTokenConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Credential and Token. Specify either Credential or Token, then retry.</value>
  </data>
  <data name="BodyConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Body and InFile. Specify either Body or Infile, then retry.  </value>
  </data>
  <data name="BodyFormConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Body and Form. Specify either Body or Form, then retry.  </value>
  </data>
  <data name="FormInFileConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: InFile and Form. Specify either InFile or Form, then retry.  </value>
  </data>
  <data name="ContentTypeException" xml:space="preserve">
    <value>The cmdlet cannot run because the -ContentType parameter is not a valid Content-Type header. Specify a valid Content-Type for -ContentType, then retry. To suppress header validation, supply the -SkipHeaderValidation parameter.</value>
  </data>
  <data name="CredentialConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Credential and UseDefaultCredentials. Specify either Credential or UseDefaultCredentials, then retry.</value>
  </data>
  <data name="DirectoryPathSpecified" xml:space="preserve">
    <value>Path '{0}' resolves to a directory. Specify a path including a file name, and then retry the command.</value>
  </data>
  <data name="EmptyKeyInJsonString" xml:space="preserve">
    <value>The provided JSON includes a property whose name is an empty string, this is only supported using the -AsHashTable switch.</value>
  </data>
  <data name="DuplicateKeysInJsonString" xml:space="preserve">
    <value>Cannot convert the JSON string because a dictionary that was converted from the string contains the duplicated key '{0}'.</value>
  </data>
  <data name="IEDomNotSupported" xml:space="preserve">
    <value>The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again. </value>
  </data>
  <data name="InsecureRedirection" xml:space="preserve">
    <value>Cannot follow an insecure redirection by default. Reissue the command specifying the -AllowInsecureRedirect switch. </value>
  </data> 
  <data name="KeysWithDifferentCasingInJsonString" xml:space="preserve">
    <value>Cannot convert the JSON string because it contains keys with different casing. Please use the -AsHashTable switch instead. The key that was attempted to be added to the existing key '{0}' was '{1}'.</value>
  </data>
  <data name="MaximumRedirectionCountExceeded" xml:space="preserve">
    <value>The maximum redirection count has been exceeded. To increase the number of redirections allowed, supply a higher value to the -MaximumRedirection parameter.</value>
  </data>
  <data name="MultiplePathsResolved" xml:space="preserve">
    <value>Path '{0}' can be resolved to multiple paths.</value>
  </data>
  <data name="NonStringKeyInDictionary" xml:space="preserve">
    <value>The type '{0}' is not supported for serialization or deserialization of a dictionary. Keys must be strings.</value>
  </data>
  <data name="NoPathResolved" xml:space="preserve">
    <value>Path '{0}' cannot be resolved to a file.</value>
  </data>
  <data name="NotFilesystemPath" xml:space="preserve">
    <value>Path '{0}' is not a file system path. Please specify the path to a file in the file system.</value>
  </data>
  <data name="OutFileMissing" xml:space="preserve">
    <value>The cmdlet cannot run because the following parameter is missing: OutFile. Provide a valid OutFile parameter value when using the {0} parameter, then retry.</value>
  </data>
  <data name="OutFileWritingSkipped" xml:space="preserve">
    <value>The file will not be re-downloaded because the remote file is the same size as the OutFile: {0}</value>
  </data>
  <data name="ProxyCredentialConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: ProxyCredential and ProxyUseDefaultCredentials. Specify either ProxyCredential or ProxyUseDefaultCredentials, then retry.</value>
  </data>
  <data name="ProxyUriNotSupplied" xml:space="preserve">
    <value>The cmdlet cannot run because the following parameter is missing: Proxy. Provide a valid proxy URI for the Proxy parameter when using the ProxyCredential or ProxyUseDefaultCredentials parameters, then retry.</value>
  </data>
  <data name="ReadResponseComplete" xml:space="preserve">
    <value>Reading web response stream completed. Bytes downloaded: {0}</value>
  </data>
  <data name="ReadResponseProgressActivity" xml:space="preserve">
    <value>Reading web response stream</value>
  </data>
  <data name="ReadResponseProgressStatus" xml:space="preserve">
    <value>Downloaded: {0} of {1}</value>
  </data>
   <data name="ResumeNotFilePath" xml:space="preserve">
    <value>The Resume switch can only be used if OutFile targets a file but it resolves to a directory: {0}.</value>
  </data>
  <data name="SessionConflict" xml:space="preserve">
    <value>The cmdlet cannot run because the following conflicting parameters are specified: Session and SessionVariable. Specify either Session or SessionVariable, then retry.</value>
  </data>
  <data name="ThumbprintNotFound" xml:space="preserve">
    <value>Unable to retrieve certificates because the thumbprint is not valid. Verify the thumbprint and retry. </value>
  </data>
  <data name="WriteRequestComplete" xml:space="preserve">
    <value>Web request completed. (Number of bytes processed: {0})</value>
  </data>
  <data name="WriteRequestCancelled" xml:space="preserve">
    <value>Web request cancelled. (Number of bytes processed: {0})</value>
  </data>
  <data name="WriteRequestProgressActivity" xml:space="preserve">
    <value>Web request status</value>
  </data>
  <data name="WriteRequestProgressStatus" xml:space="preserve">
    <value>Downloaded: {0} of {1}</value>
  </data>
  <data name="JsonDeserializationFailed" xml:space="preserve">
    <value>Conversion from JSON failed with error: {0}</value>
  </data>
  <data name="ResponseStatusCodeFailure" xml:space="preserve">
    <value>Response status code does not indicate success: {0} ({1}).</value>
  </data>
  <data name="FollowingRelLinkVerboseMsg" xml:space="preserve">
    <value>Following rel link {0}</value>
  </data>
  <data name="WebMethodInvocationVerboseMsg" xml:space="preserve">
    <value>Requested HTTP/{0} {1} with {2}-byte payload</value>
  </data>
  <data name="WebMethodResumeFailedVerboseMsg" xml:space="preserve">
    <value>The remote server indicated it could not resume downloading. The local file will be overwritten.</value>
  </data>
  <data name="WebResponseVerboseMsg" xml:space="preserve">
    <value>Received HTTP/{0} {1}-byte response of content type {2}</value>
  </data>
  <data name="WebResponseNoSizeVerboseMsg" xml:space="preserve">
    <value>Received HTTP/{0} response of content type {1} of unknown size</value>
  </data>
  <data name="RetryVerboseMsg" xml:space="preserve">
    <value>Retrying after interval of {0} seconds. Status code for previous attempt: {1}</value>
  </data>
  <data name="JsonMaxDepthReached" xml:space="preserve">
    <value>Resulting JSON is truncated as serialization has exceeded the set depth of {0}.</value>
  </data>
  <data name="WebSessionConnectionRecreated" xml:space="preserve">
    <value>The WebSession properties were changed between requests forcing all HTTP connections in the session to be recreated.</value>
  </data>
</root>
