<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="https://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CertProvidername" xml:space="preserve">
    <value>X509 Certificate Provider</value>
  </data>
  <data name="CertificateNotFound" xml:space="preserve">
    <value>Cannot find the X509 certificate at path {0}.</value>
  </data>
  <data name="CertificateStoreNotFound" xml:space="preserve">
    <value>Cannot find the X509 certificate store at path {0}.</value>
  </data>
  <data name="CertificateStoreLocationNotFound" xml:space="preserve">
    <value>Cannot find the certificate store because the specified X509 store location {0} is not valid.</value>
  </data>
  <data name="InvalidPath" xml:space="preserve">
    <value>Cannot process the path because path {0} is not a valid certificate provider path.</value>
  </data>
  <data name="Action_Move" xml:space="preserve">
    <value>Move certificate</value>
  </data>
  <data name="Action_Remove" xml:space="preserve">
    <value>Remove certificate</value>
  </data>
  <data name="Action_RemoveAndDeleteKey" xml:space="preserve">
    <value>Remove certificate and its private key.</value>
  </data>
  <data name="Action_Invoke" xml:space="preserve">
    <value>Invoke Certificate Manager</value>
  </data>
  <data name="MoveItemTemplate" xml:space="preserve">
      <value>Item: {0} Destination: {1} </value>
  </data>
  <data name="CannotMoveContainer" xml:space="preserve">
      <value>You cannot move a certificate container. </value>
  </data>
  <data name="CannotMoveCrossContext" xml:space="preserve">
      <value>You cannot move a certificate from user store to or from machine. </value>
  </data>
  <data name="CannotMoveToSameStore" xml:space="preserve">
    <value>You cannot move a certificate to the same store. </value>
  </data>
  <data name="CannotCreateItem" xml:space="preserve">
    <value>You cannot create an item other than certificate store. </value>
  </data>
  <data name="CannotCreateUserStore" xml:space="preserve">
    <value>Creating certificate stores under CurrentUser is not supported. </value>
  </data>
  <data name="CannotDeleteUserStore" xml:space="preserve">
    <value>Deleting certificate stores under CurrentUser is not supported. </value>
  </data>
  <data name="InvalidDestStore" xml:space="preserve">
    <value>The destination is not a valid store. </value>
  </data>
  <data name="RemoveItemTemplate" xml:space="preserve">
    <value>Item: {0} </value>
  </data>
  <data name="RemoveStoreTemplate" xml:space="preserve">
    <value>The store {0} is a built-in system store and cannot be deleted.</value>
  </data>
  <data name="CannotRemoveContainer" xml:space="preserve">
    <value>You cannot remove a certificate container. </value>
  </data>
  <data name="VerboseNoPrivateKey" xml:space="preserve">
    <value>Private key skipped. The certificate has no private key association. </value>
  </data>
  <data name="UINotAllowed" xml:space="preserve">
    <value>The operation is on user root store and UI is not allowed. </value>
  </data>
  <data name="RemoteErrorMessage" xml:space="preserve">
    <value>. The following error may be a result of user credentials required on the remote machine. See Enable-WSManCredSSP Cmdlet help on how to enable and use CredSSP for delegation with PowerShell remoting. </value>
  </data>
</root>
