# Environment variables defined in a calling workflow are not accessible to this reusable workflow. Refer to the documentation for further details on this limitation.
name: vsts_ci_linux_templates_packaging
on:
  workflow_call:
    inputs:
      pool:
        required: false
        default: ubuntu-20.04
        type: string
      name:
        required: false
        default: Linux
        type: string
jobs:
  ${{ parameters.name }}_packaging:
    name: ${{ parameters.name }} packaging
    runs-on: ${{ inputs.pool }}
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: Capture Environment
      if: success() || failure()
      run: 'Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose'
      shell: pwsh
#     # This action relies on the workflow '.yml' being present in this repository (change the repository parameter if the workflow is in a different repository).
#     # Ensure the workflow exists and uploads an artifact for this to use.
#     - name: Download build artifacts
#       uses: dawidd6/action-download-artifact@v3.0.0
#       with:
#         github_token: "${{ secrets.GITHUB_TOKEN }}"
#         path: "${{ github.workspace }}"
#         repo: "${{ github.repository }}"
    - name: Capture Artifacts Directory
      continue-on-error: true
      run: Get-ChildItem "${{ github.workspace }}\*" -Recurse
      shell: pwsh
    - name: Bootstrap
      run: |-
        Import-Module .\build.psm1
        Start-PSBootstrap -Package
      shell: pwsh
    - name: Capture Artifacts Directory
      continue-on-error: true
      run: Import-Module ./build.psm1
      shell: pwsh
    - name: Extract Files
      uses: actions/github-script@v7.0.0
      env:
        DESTINATION_FOLDER: "${{ github.workspace }}/bins"
        ARCHIVE_FILE_PATTERNS: "${{ github.workspace }}/build/build.zip"
      with:
        script: |-
          const fs = require('fs').promises
          const path = require('path')
          const target = path.resolve(process.env.DESTINATION_FOLDER)
          const patterns = process.env.ARCHIVE_FILE_PATTERNS
          const globber = await glob.create(patterns)
          await io.mkdirP(path.dirname(target))
          for await (const file of globber.globGenerator()) {
            if ((await fs.lstat(file)).isDirectory()) continue
            await exec.exec(`7z x ${file} -o${target} -aoa`)
          }
    - name: Fix permissions
      continue-on-error: true
      run: |-
        find "${{ github.workspace }}/bins" -type d -exec chmod +rwx {} \;
        find "${{ github.workspace }}/bins" -type f -exec chmod +rw {} \;
      shell: bash
    - name: Capture Extracted Build ZIP
      continue-on-error: true
      run: Get-ChildItem "${{ github.workspace }}\bins\*" -Recurse -ErrorAction SilentlyContinue
      shell: pwsh
    - name: Packaging Tests
      if: success()
      run: |-
        Import-Module .\tools\ci.psm1
        Restore-PSOptions -PSOptionsPath '${{ github.workspace }}\build\psoptions.json'
        $options = (Get-PSOptions)
        $rootPath = '${{ github.workspace }}\bins'
        $originalRootPath = Split-Path -path $options.Output
        $path = Join-Path -path $rootPath -ChildPath (split-path -leaf -path $originalRootPath)
        $pwshPath = Join-Path -path $path -ChildPath 'pwsh'
        chmod a+x $pwshPath
        $options.Output = $pwshPath
        Set-PSOptions $options
        Invoke-CIFinish
      shell: pwsh
    - name: Upload packages
      run: |-
        Get-ChildItem "${env:BUILD_ARTIFACTSTAGINGDIRECTORY}\*.deb" -Recurse | ForEach-Object {
          $packagePath = $_.FullName
          Write-Host "Uploading $packagePath"
          Write-Host "##vso[artifact.upload containerfolder=deb;artifactname=deb]$packagePath"
        }
        Get-ChildItem "${env:BUILD_ARTIFACTSTAGINGDIRECTORY}\*.rpm" -Recurse | ForEach-Object {
          $packagePath = $_.FullName
          Write-Host "Uploading $packagePath"
          Write-Host "##vso[artifact.upload containerfolder=rpm;artifactname=rpm]$packagePath"
        }
        Get-ChildItem "${env:BUILD_ARTIFACTSTAGINGDIRECTORY}\*.tar.gz" -Recurse | ForEach-Object {
          $packagePath = $_.FullName
          Write-Host "Uploading $packagePath"
          Write-Host "##vso[artifact.upload containerfolder=rpm;artifactname=rpm]$packagePath"
        }
      shell: pwsh
