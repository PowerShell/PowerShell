name: xUnit Tests (Reusable)

on:
  workflow_call:
    inputs:
      runner_os:
        description: 'Runner OS for xUnit tests'
        type: string
        required: false
        default: ubuntu-latest
      test_results_artifact_name:
        description: 'Artifact name for xUnit test results directory'
        type: string
        required: false
        default: testResults-xunit

jobs:
  xunit:
    name: Run xUnit Tests
    runs-on: ${{ inputs.runner_os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1000

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          global-json-file: ./global.json

      - name: Bootstrap
        shell: pwsh
        run: |
          Import-Module ./tools/ci.psm1
          Invoke-CIInstall -SkipUser
          Sync-PSTags -AddRemoteIfMissing

      - name: Install dotnet-coverage tool
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Build PowerShell
        shell: pwsh
        run: |
          Import-Module ./tools/ci.psm1
          Start-PSBuild
          Write-Host "Completed PowerShell build."

      - name: Run xUnit tests with code coverage
        shell: pwsh
        run: |
          Import-Module ./tools/ci.psm1
          Import-Module ./build.psm1
          
          # Get build options
          $options = Get-PSOptions
          $Content = Split-Path -Parent (Get-PSOutput)
          if (-not (Test-Path $Content)) {
              throw "PowerShell must be built before running tests!"
          }
          
          $xUnitTestResultsFile = Join-Path -Path $PWD -ChildPath "xUnitTestResults.xml"
          $coverageFile = Join-Path -Path $PWD -ChildPath "coverage.xml"
          
          Write-Host "Running xUnit tests with code coverage..."
          
          # Add workaround to unblock xUnit testing
          $dotnetPath = if ($env:OS -match 'Windows') { "$env:LocalAppData\Microsoft\dotnet" } else { "$env:HOME/.dotnet" }
          $originalDOTNET_ROOT = $env:DOTNET_ROOT
          $env:DOTNET_ROOT = $dotnetPath
          
          try {
            Push-Location test/xUnit
            
            # Remove old test results if they exist
            if (Test-Path $xUnitTestResultsFile) {
                Remove-Item $xUnitTestResultsFile -Force -ErrorAction SilentlyContinue
            }
            if (Test-Path $coverageFile) {
                Remove-Item $coverageFile -Force -ErrorAction SilentlyContinue
            }
            
            # Run tests with code coverage
            dotnet-coverage collect --output $coverageFile --output-format cobertura "dotnet test --logger:xunit;LogFilePath=$xUnitTestResultsFile --configuration $($options.configuration) --test-adapter-path:."
          } finally {
            Pop-Location
            $env:DOTNET_ROOT = $originalDOTNET_ROOT
          }
          Write-Host "Completed xUnit test run with coverage."

      - name: Upload xUnit results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: ${{ inputs.test_results_artifact_name }}
          path: ${{ github.workspace }}/xUnitTestResults.xml

      - name: Upload code coverage
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: code-coverage-xunit-${{ inputs.runner_os }}
          path: ${{ github.workspace }}/coverage.xml
