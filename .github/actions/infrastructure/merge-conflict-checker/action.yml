name: 'Check for Merge Conflict Markers'
description: 'Checks for Git merge conflict markers in changed files for pull requests'
author: 'PowerShell Team'

outputs:
  files-checked:
    description: 'Number of files checked for merge conflict markers'
    value: ${{ steps.check.outputs.files-checked }}
  conflicts-found:
    description: 'Number of files with merge conflict markers'
    value: ${{ steps.check.outputs.conflicts-found }}

runs:
  using: 'composite'
  steps:
    - name: Get changed files
      id: changed-files
      uses: actions/github-script@v7
      with:
        script: |
          let changedFiles = [];

          if (context.eventName === 'pull_request') {
            console.log(`Getting files changed in PR #${context.payload.pull_request.number}`);

            // Fetch the list of files changed in the PR
            let files = [];
            let page = 1;
            let fetchedFiles;
            do {
              fetchedFiles = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                per_page: 100,
                page: page++
              });
              files = files.concat(fetchedFiles.data);
            } while (fetchedFiles.data.length > 0);

            // Get all changed files (added, modified, or renamed)
            changedFiles = files
              .filter(file => file.status === 'added' || file.status === 'modified' || file.status === 'renamed')
              .map(file => file.filename);
          } else {
            core.setFailed(`This action only supports 'pull_request' events. Current event: ${context.eventName}`);
            return;
          }

          console.log(`Found ${changedFiles.length} changed files`);
          core.setOutput('files', JSON.stringify(changedFiles));
          core.setOutput('count', changedFiles.length);
          return changedFiles;

    - name: Check for merge conflict markers
      id: check
      shell: pwsh
      run: |
        Write-Host "Starting merge conflict marker check..." -ForegroundColor Cyan

        # Get changed files from previous step
        $changedFilesJson = '${{ steps.changed-files.outputs.files }}'
        $changedFiles = $changedFilesJson | ConvertFrom-Json

        if ($changedFiles.Count -eq 0) {
          Write-Host "No files changed, skipping check" -ForegroundColor Yellow
          "files-checked=0" >> $env:GITHUB_OUTPUT
          "conflicts-found=0" >> $env:GITHUB_OUTPUT
          exit 0
        }

        Write-Host "Checking $($changedFiles.Count) changed files for merge conflict markers" -ForegroundColor Cyan

        # Define merge conflict markers
        $conflictMarkers = @(
          '<<<<<<<',  # Conflict start marker
          '=======',  # Conflict separator
          '>>>>>>>'   # Conflict end marker
        )

        $filesWithConflicts = @()
        $filesChecked = 0

        foreach ($file in $changedFiles) {
          $filePath = Join-Path $env:GITHUB_WORKSPACE $file

          # Check if file exists (might be deleted)
          if (-not (Test-Path $filePath)) {
            Write-Host "  Skipping deleted file: $file" -ForegroundColor Gray
            continue
          }

          # Skip binary files and directories
          if ((Get-Item $filePath) -is [System.IO.DirectoryInfo]) {
            continue
          }

          $filesChecked++
          Write-Host "  Checking: $file" -ForegroundColor Gray

          # Read file content
          try {
            $content = Get-Content -Path $filePath -Raw -ErrorAction Stop

            # Check for conflict markers
            # Use a single regex to match all conflict markers at the start of any line
            $pattern = '(?m)^(<{7}|={7}|>{7})'
            $matches = [regex]::Matches($content, $pattern)
            $foundMarkers = @()
            if ($matches.Count -gt 0) {
              # Collect unique marker types found
              $foundMarkers = $matches | ForEach-Object { $_.Value } | Select-Object -Unique
            }

            if ($foundMarkers.Count -gt 0) {
              $filesWithConflicts += [PSCustomObject]@{
                File = $file
                Markers = $foundMarkers
              }
              Write-Host "  ❌ CONFLICT MARKERS FOUND in $file" -ForegroundColor Red
              Write-Host "     Markers: $($foundMarkers -join ', ')" -ForegroundColor Red
            }
          }
          catch {
            # Skip files that can't be read (likely binary)
            Write-Host "  Skipping unreadable file: $file" -ForegroundColor Gray
          }
        }

        # Output results
        "files-checked=$filesChecked" >> $env:GITHUB_OUTPUT
        "conflicts-found=$($filesWithConflicts.Count)" >> $env:GITHUB_OUTPUT

        Write-Host "`nSummary:" -ForegroundColor Cyan
        Write-Host "  Files checked: $filesChecked" -ForegroundColor Cyan
        Write-Host "  Files with conflicts: $($filesWithConflicts.Count)" -ForegroundColor Cyan

        if ($filesWithConflicts.Count -gt 0) {
          Write-Host "`n❌ Merge conflict markers detected in the following files:" -ForegroundColor Red
          foreach ($fileInfo in $filesWithConflicts) {
            Write-Host "  - $($fileInfo.File)" -ForegroundColor Red
            Write-Host "    Markers found: $($fileInfo.Markers -join ', ')" -ForegroundColor Red
          }
          Write-Host "`nPlease resolve these conflicts before merging." -ForegroundColor Red
          exit 1
        } else {
          Write-Host "`n✅ No merge conflict markers found" -ForegroundColor Green
          exit 0
        }

branding:
  icon: 'alert-triangle'
  color: 'red'
