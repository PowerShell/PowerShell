name: windows_test
description: 'Test PowerShell on Windows'

inputs:
  purpose:
    required: false
    default: ''
  tagSet:
    required: false
    default: CI
    type: string
  ctrfFolder:
    required: false
    default: ctrf
    type: string
  client-id:
    required: true
    type: string
  tenant-id:
    required: true
    type: string
  subscription-id:
    required: true
    type: string

runs:
  using: composite
  steps:
  - name: Capture Environment
    if: success() || failure()
    run: |-
      Import-Module ./tools/ci.psm1
      Show-Environment
    shell: pwsh

  - name: Download Build Artifacts
    uses: actions/download-artifact@v4
    with:
      path: "${{ github.workspace }}"

  - name: Capture Artifacts Directory
    continue-on-error: true
    run: |-
      Import-Module ./build.psm1
      Write-LogGroupStart -Title 'Artifacts Directory'
      Get-ChildItem "${{ github.workspace }}/build/*" -Recurse
      Write-LogGroupEnd -Title 'Artifacts Directory'
    shell: pwsh

  - uses: actions/setup-dotnet@v4
    with:
      global-json-file: .\global.json

  - name: Install Universal Package from Azure DevOps Feed
    uses: "./.github/actions/install-azure-devops-package"
    with:
      feed: "PowerShell-Universal"
      package: "microsoft.dsc-windows"
      version: "3.2.0-preview.6"
      project: "2972bb5c-f20c-4a60-8bd9-00ffe9987edc"
      client-id: ${{ inputs.client-id }}
      tenant-id: ${{ inputs.tenant-id }}
      subscription-id: ${{ inputs.subscription-id }}
      packageFileName: "DSC-{version}-x86_64-pc-windows-msvc.zip"
      extractSubFolder: "DSC"
      environmentVariable: "DSC_ROOT"

  - name: Bootstrap
    shell: powershell
    run: |-
      Import-Module ./build.psm1
      Write-LogGroupStart -Title 'Bootstrap'
      Write-Host "Old Path:"
      Write-Host $env:Path
      $dotnetPath = Join-Path $env:SystemDrive 'Program Files\dotnet'
      $paths = $env:Path -split ";" | Where-Object { -not $_.StartsWith($dotnetPath) }
      $env:Path = $paths -join ";"
      Write-Host "New Path:"
      Write-Host $env:Path
      # Bootstrap
      Import-Module .\tools\ci.psm1
      Invoke-CIInstall
      Write-LogGroupEnd -Title 'Bootstrap'

  - name: Test
    if: success()
    run: |-
      Import-Module .\build.psm1 -force
      Import-Module .\tools\ci.psm1
      Restore-PSOptions -PSOptionsPath '${{ github.workspace }}\build\psoptions.json'
      $options = (Get-PSOptions)
      $path = split-path -path $options.Output
      $rootPath = split-Path -path $path
      Expand-Archive -Path '${{ github.workspace }}\build\build.zip' -DestinationPath $rootPath -Force
      Invoke-CITest -Purpose '${{ inputs.purpose }}' -TagSet '${{ inputs.tagSet }}' -OutputFormat NUnitXml
    shell: pwsh

  - name: Convert, Publish, and Upload Pester Test Results
    uses: "./.github/actions/test/process-pester-results"
    with:
      name: "${{ inputs.purpose }}-${{ inputs.tagSet }}"
      testResultsFolder: ${{ runner.workspace }}\testResults
      ctrfFolder: "${{ inputs.ctrfFolder }}"
