name: linux_packaging
description: 'Linux packaging for PowerShell'

runs:
  using: composite
  steps:
  - name: Capture Environment
    if: success() || failure()
    run: 'Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose'
    shell: pwsh

  - uses: actions/setup-dotnet@v5
    with:
      global-json-file: ./global.json

  - name: Download Build Artifacts
    uses: actions/download-artifact@v4
    with:
      name: build
      path: "${{ runner.workspace }}/build"

  - name: Capture Artifacts Directory
    continue-on-error: true
    run: Get-ChildItem "${{ runner.workspace }}/build/*" -Recurse
    shell: pwsh

  - name: Bootstrap
    run: |-
      Import-Module ./build.psm1
      Start-PSBootstrap -Scenario Package
      Write-Verbose -Verbose "Start Sync-PSTags"
      Sync-PSTags -AddRemoteIfMissing
      Write-Verbose -Verbose "End Sync-PSTags"
    shell: pwsh

  - name: Extract Build ZIP
    run: |-
      $destinationFolder = "${{ runner.workspace }}/bins"
      $archiveFile = "${{ runner.workspace }}/build/build.zip"

      Write-Verbose "Extracting $archiveFile to $destinationFolder" -Verbose
      New-Item -ItemType Directory -Path $destinationFolder -Force | Out-Null
      Expand-Archive -Path $archiveFile -DestinationPath $destinationFolder -Force
    shell: pwsh

  - name: Fix permissions
    continue-on-error: true
    run: |-
      find "${{ runner.workspace }}/bins" -type d -exec chmod +rwx {} \;
      find "${{ runner.workspace }}/bins" -type f -exec chmod +rw {} \;
    shell: bash

  - name: Capture Extracted Build ZIP
    continue-on-error: true
    run: Get-ChildItem "${{ runner.workspace }}/bins/*" -Recurse -ErrorAction SilentlyContinue
    shell: pwsh

  - name: Create Packages
    env:
      BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.workspace }}/packages
    run: |-
      # Create the artifacts staging directory
      New-Item -ItemType Directory -Path "$env:BUILD_ARTIFACTSTAGINGDIRECTORY" -Force | Out-Null

      Import-Module ./tools/ci.psm1
      Restore-PSOptions -PSOptionsPath '${{ runner.workspace }}/build/psoptions.json'
      $options = (Get-PSOptions)
      $rootPath = '${{ runner.workspace }}/bins'
      $originalRootPath = Split-Path -path $options.Output
      $path = Join-Path -path $rootPath -ChildPath (split-path -leaf -path $originalRootPath)
      $pwshPath = Join-Path -path $path -ChildPath 'pwsh'
      chmod a+x $pwshPath
      $options.Output = $pwshPath
      Set-PSOptions $options
      Invoke-CIFinish
    shell: pwsh

  - name: Upload deb packages
    uses: actions/upload-artifact@v4
    with:
      name: packages-deb
      path: ${{ runner.workspace }}/packages/*.deb
      if-no-files-found: ignore

  - name: Upload rpm packages
    uses: actions/upload-artifact@v4
    with:
      name: packages-rpm
      path: ${{ runner.workspace }}/packages/*.rpm
      if-no-files-found: ignore

  - name: Upload tar.gz packages
    uses: actions/upload-artifact@v4
    with:
      name: packages-tar
      path: ${{ runner.workspace }}/packages/*.tar.gz
      if-no-files-found: ignore
