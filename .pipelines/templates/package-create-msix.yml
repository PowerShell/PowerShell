jobs:
- job: CreateMSIXBundle
  displayName: Create .msixbundle file
  pool:
    type: windows

  variables:
    - group: msixTools
    - group: 'Azure Blob variable group'
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'

  steps:
    - template: release-SetReleaseTagandContainerName.yml@self

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_arm64
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows arm64 packages

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_x64
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows x64 packages

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_x86
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows x86 packages
    
    # Finds the makeappx tool on the machine with image: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest'
    - pwsh: |
        $cmd = Get-Command makeappx.exe -ErrorAction Ignore
        if ($cmd) {
            Write-Verbose -Verbose 'makeappx available in PATH'
            $exePath = $cmd.Source
        } else {
            $toolsDir = '$(Pipeline.Workspace)\releasePipeline\tools'
            New-Item $toolsDir -Type Directory -Force > $null
            $makeappx = Get-ChildItem -Recurse 'C:\Program Files (x86)\Windows Kits\10\makeappx.exe' |
              Where-Object { $_.DirectoryName -match 'x64' } |
              Select-Object -Last 1
            $exePath = $makeappx.FullName
            Write-Verbose -Verbose 'makeappx was found:'
        }
        $vstsCommandString = "vso[task.setvariable variable=MakeAppxPath]$exePath"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Find makeappx tool
      retryCountOnTaskFailure: 1

    - pwsh: |
        $sourceDir = '$(Pipeline.Workspace)\releasePipeline\msix'
        $null = New-Item -Path $sourceDir -ItemType Directory -Force

        $msixFiles = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/downloads/*.msix" -Recurse
        foreach ($msixFile in $msixFiles) {
            $null = Copy-Item -Path $msixFile.FullName -Destination $sourceDir -Force -Verbose
        }

        $file = Get-ChildItem $sourceDir | Select-Object -First 1
        $prefix = ($file.BaseName -split "-win")[0]
        $pkgName = "$prefix.msixbundle"
        Write-Verbose -Verbose "Creating $pkgName"

        $makeappx = '$(MakeAppxPath)'
        $outputDir = "$sourceDir\output"
        New-Item $outputDir -Type Directory -Force > $null
        & $makeappx bundle /d $sourceDir /p "$outputDir\$pkgName"

        Get-ChildItem -Path $sourceDir -Recurse
        $vstsCommandString = "vso[task.setvariable variable=BundleDir]$outputDir"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Create MsixBundle
      retryCountOnTaskFailure: 1

    - task: onebranch.pipeline.signing@1
      displayName: Sign MsixBundle
      inputs:
        command: 'sign'
        signing_profile: $(MSIXProfile)
        files_to_sign: '**/*.msixbundle'
        search_root: '$(BundleDir)'
    
    - pwsh: |
        $signedBundle = Get-ChildItem -Path $(BundleDir) -Filter "*.msixbundle" -File
        Write-Verbose -Verbose "Signed bundle: $signedBundle"

<<<<<<< HEAD:.pipelines/templates/package-create-msix.yml
        if (-not (Test-Path $(ob_outputDirectory))) {
          New-Item -ItemType Directory -Path $(ob_outputDirectory) -Force
        }

        Copy-Item -Path $signedBundle.FullName -Destination "$(ob_outputDirectory)" -Verbose
=======
        # Ensure the destination directory exists
        if (-not (Test-Path -Path "$(ob_outputDirectory)")) {
            Write-Verbose -Verbose "Creating destination directory: $(ob_outputDirectory)"
            New-Item -Path "$(ob_outputDirectory)" -ItemType Directory -Force | Out-Null
        }

        Copy-Item -Path $signedBundle.FullName -Destination "$(ob_outputDirectory)\$($signedBundle.Name)" -Verbose
>>>>>>> ca7038b7c (Fix MSIX artifact upload, vPack template, changelog hashes, git tag command (#25437)):.pipelines/templates/release-create-msix.yml

        Write-Verbose -Verbose "Uploaded Bundle:"
        Get-ChildItem -Path $(ob_outputDirectory) | Write-Verbose -Verbose
      displayName: Upload msixbundle to Artifacts
