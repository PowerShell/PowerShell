jobs:
- job: CreateMSIXBundle
  displayName: Create .msixbundle file
  pool:
    type: windows

  variables:
    - group: msixTools
    - group: 'Azure Blob variable group'
    - group: 'Store Publish Variables'
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'

  steps:
    - checkout: self
      clean: true
      env:
        ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

    - template: release-SetReleaseTagandContainerName.yml@self

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_arm64
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows arm64 packages

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_x64
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows x64 packages

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifact: drop_windows_package_package_win_x86
        itemPattern: |
          **/*.msix
        targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
      displayName: Download windows x86 packages
    
    # Finds the makeappx tool on the machine with image: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest'
    - pwsh: |
        $cmd = Get-Command makeappx.exe -ErrorAction Ignore
        if ($cmd) {
            Write-Verbose -Verbose 'makeappx available in PATH'
            $exePath = $cmd.Source
        } else {
            $toolsDir = '$(Pipeline.Workspace)\releasePipeline\tools'
            New-Item $toolsDir -Type Directory -Force > $null
            $makeappx = Get-ChildItem -Recurse 'C:\Program Files (x86)\Windows Kits\10\makeappx.exe' |
              Where-Object { $_.DirectoryName -match 'x64' } |
              Select-Object -Last 1
            $exePath = $makeappx.FullName
            Write-Verbose -Verbose 'makeappx was found:'
        }
        $vstsCommandString = "vso[task.setvariable variable=MakeAppxPath]$exePath"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Find makeappx tool
      retryCountOnTaskFailure: 1

    - pwsh: |
        $sourceDir = '$(Pipeline.Workspace)\releasePipeline\msix'
        $null = New-Item -Path $sourceDir -ItemType Directory -Force

        $msixFiles = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/downloads/*.msix" -Recurse
        foreach ($msixFile in $msixFiles) {
            $null = Copy-Item -Path $msixFile.FullName -Destination $sourceDir -Force -Verbose
        }

        $file = Get-ChildItem $sourceDir | Select-Object -First 1
        $prefix = ($file.BaseName -split "-win")[0]
        $pkgName = "$prefix.msixbundle"
        Write-Verbose -Verbose "Creating $pkgName"

        $makeappx = '$(MakeAppxPath)'
        $outputDir = "$sourceDir\output"
        New-Item $outputDir -Type Directory -Force > $null
        & $makeappx bundle /d $sourceDir /p "$outputDir\$pkgName"

        Get-ChildItem -Path $sourceDir -Recurse
        $vstsCommandString = "vso[task.setvariable variable=BundleDir]$outputDir"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Create MsixBundle
      retryCountOnTaskFailure: 1

    - task: onebranch.pipeline.signing@1
      displayName: Sign MsixBundle
      inputs:
        command: 'sign'
        signing_profile: $(MSIXProfile)
        files_to_sign: '**/*.msixbundle'
        search_root: '$(BundleDir)'
    
    - pwsh: |
        $signedBundle = Get-ChildItem -Path $(BundleDir) -Filter "*.msixbundle" -File
        Write-Verbose -Verbose "Signed bundle: $signedBundle"

        if (-not (Test-Path $(ob_outputDirectory))) {
          New-Item -ItemType Directory -Path $(ob_outputDirectory) -Force
        }

        Copy-Item -Path $signedBundle.FullName -Destination "$(ob_outputDirectory)" -Verbose

        Write-Verbose -Verbose "Uploaded Bundle:"
        Get-ChildItem -Path $(ob_outputDirectory) | Write-Verbose -Verbose
      displayName: Upload msixbundle to Artifacts

    - pwsh: |
        Write-Verbose -Verbose "Pipeline.Workspace: $(Pipeline.Workspace)"
        Get-ChildItem -Path $(Pipeline.Workspace) -Recurse | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
        Get-ChildItem -Path $(System.DefaultWorkingDirectory) -Recurse | Select-Object -ExpandProperty FullName
        Test-Path -Path '$(System.DefaultWorkingDirectory)/PowerShell/.pipelines/store/PDP-Private.xml' | Write-Verbose -Verbose
      displayName: Output Pipeline.Workspace and System.DefaultWorkingDirectory
    
    - template: channelSelection.yml@self

    - pwsh: |
        $IsLTS = '$(ChannelSelection.IsLTS)' -eq 'true'
        $IsStable = '$(ChannelSelection.IsStable)' -eq 'true' 
        $IsPreview = '$(ChannelSelection.IsPreview)' -eq 'true'

        Write-Verbose -Verbose "Channel Selection - LTS: $IsLTS, Stable: $IsStable, Preview: $IsPreview"

        # Define app configurations for each channel
        $channelConfigs = @{
          'LTS' = @{
            AppStoreName = 'PowerShell-LTS'
            ProductId = '$(productId-LTS)'
            ServiceEndpoint = "StoreAppPublish-Stable"
          }
          'Stable' = @{
            AppStoreName = 'PowerShell'
            ProductId = '$(productId-Stable)'
            ServiceEndpoint = "StoreAppPublish-Stable"
          }
          'Preview' = @{
            AppStoreName = 'PowerShell (Preview)'
            ProductId = '$(productId-Preview)'
            ServiceEndpoint = "StoreAppPublish-Preview"
          }
        }

        $currentChannel = if ($IsLTS) { 'LTS' }
          elseif ($IsStable) { 'Stable' }
          elseif ($IsPreview) { 'Preview' }
          else { 
            Write-Error "No valid channel detected"
            exit 1
          }
                       
        $config = $channelConfigs[$currentChannel]
        Write-Verbose -Verbose "Selected channel: $currentChannel"
        Write-Verbose -Verbose "App Store Name: $($config.AppStoreName)"
        Write-Verbose -Verbose "Product ID: $($config.ProductId)"

        # Update PDP.xml file
        $pdpPath = '$(System.DefaultWorkingDirectory)/PowerShell/.pipelines/store/PDP/PDP/en-US/PDP.xml'
        if (Test-Path $pdpPath) {
          Write-Verbose -Verbose "Updating PDP file: $pdpPath"

          [xml]$pdpXml = Get-Content $pdpPath -Raw

          $appStoreNameElement = $pdpXml.SelectSingleNode("//AppStoreName[@_locID]")
          if ($appStoreNameElement) {
            $appStoreNameElement.InnerText = $config.AppStoreName
            Write-Verbose -Verbose "Updated AppStoreName to: $($config.AppStoreName)"
          } else {
            Write-Warning "AppStoreName element not found in PDP file"
          }

          $pdpXml.Save($pdpPath)
          Write-Verbose -Verbose "PDP file updated successfully"
        } else {
          Write-Error "PDP file not found: $pdpPath"
          exit 1
        }

        # Update SBConfig.json file
        $sbConfigPath = '$(System.DefaultWorkingDirectory)/PowerShell/.pipelines/store/SBConfig.json'
        if (Test-Path $sbConfigPath) {
          Write-Verbose -Verbose "Updating SBConfig file: $sbConfigPath"

          $sbConfigJson = Get-Content $sbConfigPath -Raw | ConvertFrom-Json

          $sbConfigJson.appSubmission.productId = $config.ProductId
          Write-Verbose -Verbose "Updated productId to: $($config.ProductId)"

          $sbConfigJson | ConvertTo-Json -Depth 100 | Set-Content $sbConfigPath -Encoding UTF8
          Write-Verbose -Verbose "SBConfig file updated successfully"
        } else {
          Write-Error "SBConfig file not found: $sbConfigPath"
          exit 1
        }

        Write-Host "##vso[task.setvariable variable=ServiceConnection]$($config.ServiceEndpoint)"
        Write-Host "##vso[task.setvariable variable=SBConfigPath]$($config.SBConfigPath)"
      name: UpdateConfigs
      displayName: Update PDPs and SBConfig.json

    - task: MS-RDX-MRO.windows-store-publish-dev.package-task.store-package@3
      displayName: 'Create StoreBroker Package'
      inputs:
        serviceEndpoint: '$(ServiceConnection)'
        sbConfigPath: '$(SBConfigPath)'
        sourceFolder: '$(BundleDir)'
        contents: '*.msixBundle'
        outSBName: 'PowerShellStorePackage'
        pdpPath: '$(System.DefaultWorkingDirectory)/PowerShell/.pipelines/store/PDP/PDP'
        pdpMediaPath: '$(System.DefaultWorkingDirectory)/PowerShell/.pipelines/store/PDP/PDP-Media'

    - pwsh: |
        $submissionPackageDir = "$(System.DefaultWorkingDirectory)/SBOutDir"
        $jsonFile = "$submissionPackageDir/PowerShellStorePackage.json"
        $zipFile = "$submissionPackageDir/PowerShellStorePackage.zip"
    
        if ((Test-Path $jsonFile) -and (Test-Path $zipFile)) {
          Write-Verbose -Verbose "Uploading StoreBroker Package files:"
          Write-Verbose -Verbose "JSON File: $jsonFile"
          Write-Verbose -Verbose "ZIP File: $zipFile"

          Copy-Item -Path $submissionPackageDir -Destination "$(ob_outputDirectory)" -Verbose -Recurse
        } 

        else {
          Write-Error "Required files not found in $submissionPackageDir"
        }
      displayName: 'Upload StoreBroker Package'
