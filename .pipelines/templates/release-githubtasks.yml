jobs:
- job: GithubReleaseDraft
  displayName: Create GitHub Release Draft
  condition: succeeded()
  pool:
    type: release
    os: windows
  templateContext:
    inputs:
      - input: pipelineArtifact
        artifactName: drop_DownloadPackages_upload_packages
  variables:
  - template: ./variable/release-shared.yml@self

  steps:
  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        Get-ChildItem Env: | Out-String -Stream | write-Verbose -Verbose
    displayName: 'Capture Environment Variables'

  - template: release-install-pwsh.yml

  - template: release-checkout-pwsh-repo.yml

  - template: release-SetReleaseTagAndContainerName.yml

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        git clone --depth 1 https://$(mscodehubCodeReadPat)@mscodehub.visualstudio.com/PowerShellCore/_git/Internal-PowerShellTeam-Tools '$(Pipeline.Workspace)/tools'
    displayName: Clone Internal-Tools repository

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $Path = "$(Pipeline.Workspace)/GitHubPackages"
        $OutputPath = Join-Path $Path 'hashes.sha256'
        $packages  = Get-ChildItem -Path $Path -Include * -Recurse -File
        $checksums = $packages |
            ForEach-Object {
                Write-Verbose -Verbose "Generating checksum file for $($_.FullName)"
                $packageName = $_.Name
                $hash = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash.ToLower()
                # the '*' before the packagename signifies it is a binary
                "$hash *$packageName"
            }
        $checksums | Out-File -FilePath $OutputPath -Force
        $fileContent = Get-Content -Path $OutputPath -Raw | Out-String
        Write-Verbose -Verbose -Message $fileContent
    displayName: Add sha256 hashes

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $releaseVersion = '$(ReleaseTag)' -replace '^v',''
        $vstsCommandString = "vso[task.setvariable variable=ReleaseVersion]$releaseVersion"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
    displayName: 'Set release version'
  
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Get-ChildItem $(Pipeline.Workspace) -recurse | Select-Object -ExpandProperty FullName
    displayName: List all files in the workspace

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Import-module '$(Pipeline.Workspace)/tools/Scripts/GitHubRelease.psm1'
        $releaseVersion = '$(ReleaseTag)' -replace '^v',''
        $semanticVersion = [System.Management.Automation.SemanticVersion]$releaseVersion
  
        $isPreview = $semanticVersion.PreReleaseLabel -ne $null
  
        $fileName = if ($isPreview) {
          "preview.md"
        }
        else {
          $semanticVersion.Major.ToString() + "." + $semanticVersion.Minor.ToString() + ".md"
        }
  
        $filePath = "$(Pipeline.Workspace)/PowerShell/CHANGELOG/$fileName"
        Write-Verbose -Verbose "Selected Log file: $filePath"
  
        if (-not (Test-Path $filePath)) {
          throw "$filePath not found"
        }
  
        $changelog = Get-Content -Path $filePath
  
        $startPattern = "^## \[" + ([regex]::Escape($releaseVersion)) + "\]"
        $endPattern = "^## \[{0}\.{1}\.{2}*" -f $semanticVersion.Major, $semanticVersion.Minor, $semanticVersion.Patch
  
        $clContent = $changelog | ForEach-Object {
            if ($_ -match $startPattern) { $outputLine = $true }
            elseif ($_ -match $endPattern) { $outputLine = $false }
            if ($outputLine) { $_}
          } | Out-String
  
        Write-Verbose -Verbose "Selected content: `n$clContent"
  
        Publish-ReleaseDraft -Tag '$(ReleaseTag)' -Name '$(ReleaseTag) Release of PowerShell' -Description $clContent -User PowerShell -Repository PowerShell  -PackageFolder "$(Pipeline.Workspace)/GitHubPackages" -Token $(GitHubReleasePat)
    displayName: Publish Release Draft
