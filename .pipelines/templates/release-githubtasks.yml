jobs:
- job: GithubReleaseDraft
  displayName: Create GitHub Release Draft
  condition: succeeded()
  pool:
    type: release
    os: windows
  templateContext:
    inputs:
      - input: pipelineArtifact
        pipeline: PSPackagesOfficial
        artifactName: drop_upload_upload_packages
  variables:
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: 1
  - group: 'mscodehub-code-read-akv'
  - group: 'Azure Blob variable group'
  - group: 'GitHubTokens'
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: ob_sdl_codeSignValidation_enabled
    value: false
  - name: ob_sdl_binskim_enabled
    value: false
  - name: ob_sdl_tsa_configFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
  - name: ob_sdl_credscan_suppressionsFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json

  steps:
  - task: PowerShell@2
    inputs:
      targetType: inline
      script: |
        $localInstallerPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter '*win-x64.msi' | Select-Object -First 1 -ExpandProperty FullName
        if (Test-Path -Path $localInstallerPath) {
          Write-Verbose -Verbose "Installer found at $localInstallerPath"
        } else {
          throw "Installer not found"
        }
        Write-Verbose -Verbose "Installing PowerShell via msiexec"
        Start-Process -FilePath msiexec -ArgumentList "/package $localInstallerPath /quiet REGISTER_MANIFEST=1" -Wait -NoNewWindow
        $pwshPath = Get-ChildItem -Directory -Path 'C:\Program Files\PowerShell\7*' | Select-Object -First 1 -ExpandProperty FullName
        if (Test-Path -Path $pwshPath) {
          Write-Verbose -Verbose "PowerShell installed at $pwshPath"
          Write-Verbose -Verbose "Adding pwsh to env:PATH"
          Write-Host "##vso[task.prependpath]$pwshPath"
        } else {
          throw "PowerShell not installed"
        }
    displayName: Install pwsh 7

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Write-Verbose -Verbose "Pwsh 7 Installed"
        Write-Verbose -Verbose "env:Path: "
        $env:PATH -split ';' | ForEach-Object {
          Write-Verbose -Verbose $_
        }
    displayName: Check pwsh 7 installation

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Write-Verbose -Verbose "Deploy Box Product Pathway Does Not Support the `"checkout`" task"
        git clone https://$(mscodehubCodeReadPat)@mscodehub.visualstudio.com/PowerShellCore/_git/PowerShell '$(Pipeline.Workspace)/PowerShell'
        cd $(Pipeline.Workspace)/PowerShell
        $branchParts = $ENV:BUILD_SOURCEBRANCH -split '/'
        $branchName = "$($branchParts[-2])/$($branchParts[-1])"
        git checkout $branchName
    displayName: Checkout repository

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $variable = 'releaseTag'
        $branch = $ENV:BUILD_SOURCEBRANCH
        if($branch -notmatch  '^.*((release/|rebuild/.*rebuild))')
        {
            throw "Branch name is not in release format: '$branch'"
        }

        $releaseTag = $Branch -replace '^.*((release|rebuild)/)'
        $vstsCommandString = "vso[task.setvariable variable=$Variable]$releaseTag"
        Write-Verbose -Message "setting $Variable to $releaseTag" -Verbose
        Write-Host -Object "##$vstsCommandString"
    displayName: Set Release Tag
  
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $azureVersion = '$(ReleaseTag)'.ToLowerInvariant() -replace '\.', '-'
        $vstsCommandString = "vso[task.setvariable variable=AzureVersion]$azureVersion"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      
        $version = '$(ReleaseTag)'.ToLowerInvariant().Substring(1)
        $vstsCommandString = "vso[task.setvariable variable=Version]$version"
        Write-Host ("sending " + $vstsCommandString)
        Write-Host "##$vstsCommandString"
    displayName: Set container name

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Get-ChildItem Env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
    displayName: 'Capture Environment Variables'

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        git clone https://$(mscodehubCodeReadPat)@mscodehub.visualstudio.com/PowerShellCore/_git/Internal-PowerShellTeam-Tools '$(Pipeline.Workspace)/tools'
    displayName: Clone Internal-Tools repository
  
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $releaseVersion = '$(ReleaseTag)' -replace '^v',''
        Write-Verbose -Verbose "Moving packages to staging directory"
        $packagesRoot = "$(Pipeline.Workspace)/PSPackagesOfficial"
        New-Item -Path $packagesRoot -ItemType Directory -Force > $null
        Get-ChildItem -Path $(Pipeline.Workspace) | 
          Where-Object { $_.Name -match "powershell-*" -or $_.Name -match "powershell_*" -and -not $_.PSIsContainer } |
          ForEach-Object {
            Move-Item -Path $_.FullName -Destination $packagesRoot
          }
        Write-Verbose -Verbose "List all packages in the staging directory"
        Get-ChildItem -Path $packagesRoot -Recurse | Select-Object -ExpandProperty FullName
    displayName: Move packages to staging directory
  
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $Path = "$(Pipeline.Workspace)/PSPackagesOfficial"
        $OutputPath = Join-Path $Path 'hashes.sha256'
        $srcPaths = @($Path)
        $packages  = Get-ChildItem -Path $srcPaths -Include * -Recurse -File
        $checksums = $packages |
            ForEach-Object {
                Write-Verbose -Verbose "Generating checksum file for $($_.FullName)"
                $packageName = $_.Name
                $hash = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash.ToLower()
                # the '*' before the packagename signifies it is a binary
                "$hash *$packageName"
            }
        $checksums | Out-File -FilePath $OutputPath -Force
        $fileContent = Get-Content -Path $OutputPath -Raw | Out-String
        Write-Verbose -Verbose -Message $fileContent
    displayName: Add sha256 hashes

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $releaseVersion = '$(ReleaseTag)' -replace '^v',''
        $vstsCommandString = "vso[task.setvariable variable=ReleaseVersion]$releaseVersion"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
    displayName: 'Set release version'
  
  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Get-ChildItem $(Pipeline.Workspace) -recurse | Select-Object -ExpandProperty FullName
    displayName: List all files in the workspace

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Import-module '$(Pipeline.Workspace)/tools/Scripts/GitHubRelease.psm1'
        $releaseVersion = '$(ReleaseTag)' -replace '^v',''
        $semanticVersion = [System.Management.Automation.SemanticVersion]$releaseVersion
  
        $isPreview = $semanticVersion.PreReleaseLabel -ne $null
  
        $fileName = if ($isPreview) {
          "preview.md"
        }
        else {
          $semanticVersion.Major.ToString() + "." + $semanticVersion.Minor.ToString() + ".md"
        }
  
        $filePath = "$(Pipeline.Workspace)/PowerShell/CHANGELOG/$fileName"
        Write-Verbose -Verbose "Selected Log file: $filePath"
  
        if (-not (Test-Path $filePath)) {
          throw "$filePath not found"
        }
  
        $changelog = Get-Content -Path $filePath
  
        $startPattern = "^## \[" + ([regex]::Escape($releaseVersion)) + "\]"
        $endPattern = "^## \[{0}\.{1}\.{2}*" -f $semanticVersion.Major, $semanticVersion.Minor, $semanticVersion.Patch
  
        $clContent = $changelog | ForEach-Object {
            if ($_ -match $startPattern) { $outputLine = $true }
            elseif ($_ -match $endPattern) { $outputLine = $false }
            if ($outputLine) { $_}
          } | Out-String
  
        Write-Verbose -Verbose "Selected content: `n$clContent"
        $clContent = "Testing... DeployBox... `n`n" + $clContent
  
        Publish-ReleaseDraft -Tag '$(ReleaseTag)' -Name '$(ReleaseTag) Release of PowerShell' -Description $clContent -User PowerShell -Repository PowerShell  -PackageFolder "$(Pipeline.Workspace)/PSPackagesOfficial" -Token $(GitHubReleasePat)
    displayName: Publish Release Draft
