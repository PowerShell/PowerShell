parameters:
  runtime: x64

jobs:
- job: package_win_${{ parameters.runtime }}
  displayName: Package Windows ${{ parameters.runtime }}
  condition: succeeded()
  pool:
    type: windows

  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: nugetMultiFeedWarnLevel
      value: none
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - name: skipNugetSecurityAnalysis
      value: true
    - group: DotNetPrivateBuildAccess
    - group: certificate_logical_to_actual
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)\ONEBRANCH_ARTIFACT'
    - name: ob_sdl_binskim_enabled
      value: true
    - name: ob_sdl_tsa_configFile
      value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
    - name: ob_sdl_credscan_suppressionsFile
      value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json
    - name: Runtime
      value: ${{ parameters.runtime }}
    - group: msixTools

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - pwsh: |
      Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
    displayName: Capture environment
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - template: SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)
      CreateJson: yes
      UseJson: no

  - template: shouldSign.yml

  - template: cloneToOfficialPath.yml
    parameters:
      nativePathRoot: '$(Agent.TempDirectory)'

  - download: CoOrdinatedBuildPipeline
    artifact: drop_windows_build_windows_${{ parameters.runtime }}_release
    displayName: Download signed artifacts
    condition: ${{ ne(parameters.runtime, 'minSize') }}
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - download: CoOrdinatedBuildPipeline
    artifact: drop_windows_build_windows_x64_${{ parameters.runtime }}
    displayName: Download minsize signed artifacts
    condition: ${{ eq(parameters.runtime, 'minSize') }}
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - pwsh: |
      Write-Verbose -Verbose "signed artifacts"
      Get-ChildItem "$(Pipeline.Workspace)\CoOrdinatedBuildPipeline\drop_windows_build_windows_${{ parameters.runtime }}_release" -Recurse
    displayName: 'Capture Downloaded Artifacts'
    # Diagnostics is not critical it passes every time it runs
    continueOnError: true
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - pwsh: |
      $msixUrl = '$(makeappUrl)'
      Invoke-RestMethod -Uri $msixUrl -OutFile '$(Pipeline.Workspace)\makeappx.zip'
      Expand-Archive '$(Pipeline.Workspace)\makeappx.zip' -destination '\' -Force
    displayName: Install packaging tools
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - pwsh: |
      $runtime = '$(Runtime)'
      Write-Verbose -Verbose "runtime = '$(Runtime)'"

      $signedFolder = switch ($runtime) {
        'x64' { 'Signed-win7-x64' }
        'x86' { 'Signed-win7-x86' }
        'arm64' { 'Signed-win-arm64' }
        'fxdependent' { 'Signed-fxdependent' }
        'fxdependentWinDesktop' { 'Signed-fxdependent-win-desktop' }
        'minsize' { 'Signed-win7-x64' }
      }

      Write-Verbose -Message "Init..." -Verbose

      $repoRoot = "$env:REPOROOT"
      Import-Module "$repoRoot\build.psm1"
      Import-Module "$repoRoot\tools\packaging"

      Start-PSBootstrap -Package

      $signedFilesPath, $psoptionsFilePath = if ($env:RUNTIME -eq 'minsize') {
          "$(Pipeline.Workspace)\CoOrdinatedBuildPipeline\drop_windows_build_windows_x64_${runtime}\$signedFolder"
          "$(Pipeline.Workspace)\CoOrdinatedBuildPipeline\drop_windows_build_windows_x64_${runtime}\psoptions\psoptions.json"
        }
        else {
          "$(Pipeline.Workspace)\CoOrdinatedBuildPipeline\drop_windows_build_windows_${runtime}_release\$signedFolder"
          "$(Pipeline.Workspace)\CoOrdinatedBuildPipeline\drop_windows_build_windows_${runtime}_release\psoptions\psoptions.json"
        }

      Write-Verbose -Verbose "signedFilesPath: $signedFilesPath"
      Write-Verbose -Verbose "psoptionsFilePath: $psoptionsFilePath"

      Write-Verbose -Message "checking pwsh exists in $signedFilesPath" -Verbose
      if (-not (Test-Path $signedFilesPath\pwsh.exe)) {
        throw "pwsh.exe not found in $signedFilesPath"
      }

      Write-Verbose -Message "Restoring PSOptions from $psoptionsFilePath" -Verbose

      Restore-PSOptions -PSOptionsPath "$psoptionsFilePath"
      Get-PSOptions | Write-Verbose -Verbose

      $metadata = Get-Content "$repoRoot/tools/metadata.json" -Raw | ConvertFrom-Json
      $LTS = $metadata.LTSRelease.Package

      if ($LTS) {
        Write-Verbose -Message "LTS Release: $LTS"
      }

      Start-PSBootstrap -Package

      $WindowsRuntime = switch ($runtime) {
        'x64' { 'win7-x64' }
        'x86' { 'win7-x86' }
        'arm64' { 'win-arm64' }
        'fxdependent' { 'win7-x64' }
        'fxdependentWinDesktop' { 'win7-x64' }
        'minsize' { 'win7-x64' }
      }

      $packageTypes = switch ($runtime) {
        'x64' { @('msi', 'zip', 'msix') }
        'x86' { @('msi', 'zip', 'msix') }
        'arm64' { @('msi', 'zip', 'msix') }
        'fxdependent' { 'fxdependent' }
        'fxdependentWinDesktop' { 'fxdependent-win-desktop' }
        'minsize' { 'min-size' }
      }

      if (-not (Test-Path $(ob_outputDirectory))) {
        New-Item -ItemType Directory -Path $(ob_outputDirectory) -Force
      }

      Set-Location $repoRoot

      Start-PSPackage -Type $packageTypes -SkipReleaseChecks -WindowsRuntime $WindowsRuntime -ReleaseTag $(ReleaseTagVar) -PackageBinPath $signedFilesPath -LTS:$LTS

    displayName: 'Package ${{ parameters.buildArchitecture}}'
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

  - task: onebranch.pipeline.signing@1
    displayName: Sign MSI packages
    inputs:
      command: 'sign'
      signing_profile: external_distribution
      files_to_sign: '**\*.msi'
      search_root: '$(Pipeline.Workspace)'

  - pwsh: |
      $runtime = '$(Runtime)'
      Write-Verbose -Verbose "runtime = '$(Runtime)'"

      $repoRoot = "$env:REPOROOT"
      Import-Module "$repoRoot\build.psm1"
      Import-Module "$repoRoot\tools\packaging"

      $noExeRuntimes = @('fxdependent', 'fxdependentWinDesktop', 'minsize')

      if ($runtime -in $noExeRuntimes) {
        Write-Verbose -Verbose "No EXE generated for $runtime"
        return
      }

      $version = '$(Version)'

      $msiLocation = Get-ChildItem -Path $(Pipeline.Workspace) -Recurse -Filter "powershell-*$runtime.msi" | Select-Object -ExpandProperty FullName
      Write-Verbose -Verbose "msiLocation: $msiLocation"

      Set-Location $repoRoot

      $exePath = New-ExePackage -ProductVersion $version -ProductTargetArchitecture $runtime -MsiLocationPath $msiLocation
      Write-Verbose -Verbose "setting vso[task.setvariable variable=exePath]$exePath"
      Write-Host "##vso[task.setvariable variable=exePath]$exePath"
      Write-Verbose -Verbose "exePath: $exePath"

      $enginePath = Join-Path -Path '$(System.ArtifactsDirectory)\unsignedEngine' -ChildPath engine.exe
      Expand-ExePackageEngine -ExePath $exePath -EnginePath $enginePath -ProductTargetArchitecture $runtime
    displayName: 'Make exe and expand package'

  - task: onebranch.pipeline.signing@1
    displayName: Sign exe engine
    inputs:
      command: 'sign'
      signing_profile: $(msft_3rd_party_cert_id)
      files_to_sign: '$(System.ArtifactsDirectory)\unsignedEngine\*.exe'
      search_root: '$(Pipeline.Workspace)'

  - pwsh: |
      $runtime = '$(Runtime)'
      Write-Verbose -Verbose "runtime = '$(Runtime)'"
      $repoRoot = "$env:REPOROOT"
      Import-Module "$repoRoot\build.psm1"
      Import-Module "$repoRoot\tools\packaging"

      $noExeRuntimes = @('fxdependent', 'fxdependentWinDesktop', 'minsize')

      if ($runtime -in $noExeRuntimes) {
        Write-Verbose -Verbose "No EXE generated for $runtime"
        return
      }

      $exePath = '$(exePath)'
      $enginePath = Join-Path -Path '$(System.ArtifactsDirectory)\unsignedEngine' -ChildPath engine.exe
      $enginePath | Get-AuthenticodeSignature | out-string | Write-Verbose -verbose
      Compress-ExePackageEngine -ExePath $exePath -EnginePath $enginePath -ProductTargetArchitecture $runtime
    displayName: Compress signed exe package

  - task: onebranch.pipeline.signing@1
    displayName: Sign exe packages
    inputs:
      command: 'sign'
      signing_profile: external_distribution
      files_to_sign: '**\*.exe'
      search_root: '$(Pipeline.Workspace)'

  - pwsh: |
      $runtime = '$(Runtime)'
      Write-Verbose -Verbose "runtime = '$(Runtime)'"

      $packageTypes = switch ($runtime) {
        'x64' { @('msi', 'zip', 'msix', 'exe') }
        'x86' { @('msi', 'zip', 'msix', 'exe') }
        'arm64' { @('msi', 'zip', 'msix', 'exe') }
        'fxdependent' { 'fxdependent' }
        'fxdependentWinDesktop' { 'fxdependent-win-desktop' }
        'minsize' { 'min-size' }
      }

      if (-not (Test-Path $(ob_outputDirectory))) {
        New-Item -ItemType Directory -Path $(ob_outputDirectory) -Force
      }

      if ($packageTypes -contains 'msi') {
        $msiPkgNameFilter = "powershell-*.msi"
        $msiPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $msiPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "msiPkgPath: $msiPkgPath"
        Copy-Item -Path $msiPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

      if ($packageTypes -contains 'exe') {
        $msiPkgNameFilter = "powershell-*.exe"
        $msiPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $msiPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "msiPkgPath: $msiPkgPath"
        Copy-Item -Path $msiPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

      if ($packageTypes -contains 'zip' -or $packageTypes -contains 'fxdependent' -or $packageTypes -contains 'min-size' -or $packageTypes -contains 'fxdependent-win-desktop') {
        $zipPkgNameFilter = "powershell-*.zip"
        $zipPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $zipPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "zipPkgPath: $zipPkgPath"
        Copy-Item -Path $zipPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

      if ($packageTypes -contains 'msix') {
        $msixPkgNameFilter = "powershell-*.msix"
        $msixPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $msixPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "msixPkgPath: $msixPkgPath"
        Copy-Item -Path $msixPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }
    displayName: Copy to output directory

  - pwsh: |
      Get-ChildItem -Path $(ob_outputDirectory) -Recurse
    displayName: 'List artifacts'
    env:
      ob_restore_phase: true # This ensures this done in restore phase to workaround signing issue

