parameters:
  - name: skipPublish
    default: false
    type: boolean

jobs:
- job: NuGetPublish
  displayName: Publish to NuGet
  condition: succeeded()
  pool:
    type: release
    os: windows
  templateContext:
    inputs:
      - input: pipelineArtifact
        artifactName: drop_DownloadPackages_upload_packages

  variables:
  - template: ./variable/release-shared.yml@self

  steps:
  - template: release-install-pwsh.yml

  - template: release-checkout-pwsh-repo.yml

  - template: release-SetReleaseTagAndContainerName.yml

  - pwsh: |
      Get-ChildItem Env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
    displayName: 'Capture Environment Variables'

  - pwsh: |
      #Exclude all global tool packages. Their names start with 'PowerShell.'
      $null = New-Item -ItemType Directory -Path "$(Pipeline.Workspace)/release"
      Copy-Item "$(Pipeline.Workspace)/NuGetPackages/*.nupkg" -Destination "$(Pipeline.Workspace)/release" -Exclude "PowerShell.*.nupkg" -Force -Verbose

      $releaseVersion = '$(VERSION)'
      $globalToolPath = "$(Pipeline.Workspace)/NuGetPackages/PowerShell.$releaseVersion.nupkg"

      if ($releaseVersion -notlike '*-*') {
          # Copy the global tool package for stable releases
          Copy-Item $globalToolPath -Destination "$(Pipeline.Workspace)/release"
      }

      Write-Verbose -Verbose "The .nupkgs below will be pushed:"
      Get-ChildItem "$(Pipeline.Workspace)/release" -recurse
    displayName: Download and capture nupkgs
    condition: and(ne('${{ parameters.skipPublish }}', 'false'), succeeded())

  - task: NuGetCommand@2
    displayName: 'NuGet push'
    condition: and(ne('${{ parameters.skipPublish }}', 'false'), succeeded())
    inputs:
      command: push
      packagesToPush: '$(Pipeline.Workspace)/release/*.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: PowerShellNuGetOrgPush
