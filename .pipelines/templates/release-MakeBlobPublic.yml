jobs:
- template: /.pipelines/templates/approvalJob.yml@self
  parameters:
    displayName: Approve Blob Public
    jobName: ApproveBlobPublic
    instructions: |
      Are you sure you want to make the blob public?

- job: blobPublic
  displayName: Make Azure Blob Public
  dependsOn: ApproveBlobPublic
  condition: succeeded()
  pool:
    type: windows
  variables:
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: 1
  - group: 'Azure Blob variable group'
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: ob_sdl_codeSignValidation_enabled
    value: false
  - name: ob_sdl_binskim_enabled
    value: false
  - name: ob_sdl_tsa_configFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
  - name: ob_sdl_credscan_suppressionsFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json
  - name: ob_sdl_codeql_compiled_enabled
    value: false

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - template: /.pipelines/templates/SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)
      CreateJson: yes
      UseJson: no

  - pwsh: |
      Get-ChildItem Env:
    displayName: 'Capture Environment Variables'

  - pwsh: |
      $azureRmModule = Get-InstalledModule AzureRM -ErrorAction SilentlyContinue -Verbose
      if ($azureRmModule) {
        Write-Host 'AzureRM module exists. Removing it'
        Uninstall-AzureRm
        Write-Host 'AzureRM module removed'
      }

      Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Verbose
    displayName: Remove AzRM modules

  - task: AzureCLI@2
    displayName: 'Set blob permissions'
    inputs:
      azureSubscription: az-blob-cicd-infra
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage container set-permission --account-name $(StorageAccount) --name $(azureVersion) --public-access blob
        az storage container set-permission --account-name $(StorageAccount) --name $(azureVersion)-gc --public-access blob

- template: /.pipelines/templates/approvalJob.yml@self
  parameters:
    displayName: Approve Copy Global tool packages to PSInfra storage
    jobName: CopyBlobApproval
    dependsOnJob: blobPublic
    instructions: |
      Approval for Copy global tool packages to PSInfra storage

- job: PSInfraBlobPublic
  displayName: Copy global tools to PSInfra storage
  dependsOn: CopyBlobApproval
  pool:
    type: windows

  variables:
  - group: 'PSInfraStorage'
  - group: 'Azure Blob variable group'
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: ob_sdl_tsa_configFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
  - name: ob_sdl_credscan_suppressionsFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json

  steps:
    - checkout: self
      clean: true
      env:
        ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

    - template: /.pipelines/templates/SetVersionVariables.yml@self
      parameters:
        ReleaseTagVar: $(ReleaseTagVar)
        CreateJson: yes
        UseJson: no

    - pwsh: |
        Get-ChildItem Env:
      displayName: 'Capture Environment Variables'

    - pwsh: |
        $azureRmModule = Get-InstalledModule AzureRM -ErrorAction SilentlyContinue -Verbose
        if ($azureRmModule) {
          Write-Host 'AzureRM module exists. Removing it'
          Uninstall-AzureRm
          Write-Host 'AzureRM module removed'
        }

        Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Verbose
      displayName: Remove AzRM modules

    - task: AzurePowerShell@5
      displayName: Copy blobs to PSInfra storage
      inputs:
        azureSubscription: az-blob-cicd-infra
        scriptType: inlineScript
        azurePowerShellVersion: LatestVersion
        pwsh: true
        inline: |
          $sourceStorageAccountName = '$(StorageAccount)'
          $sourceContainerName = '$(AzureVersion)-nuget'

          $destinationStorageAccountName = '$(PSInfraStorageAccount)'
          $destinationContainerName = "tool"

          $sourceContext = New-AzStorageContext -StorageAccountName $sourceStorageAccountName
          Write-Verbose -Verbose "Source context: $($sourceContext.BlobEndPoint)"

          $destinationContext = New-AzStorageContext -StorageAccountName $destinationStorageAccountName
          Write-Verbose -Verbose "Destination context: $($destinationContext.BlobEndPoint)"

          $prefix = 'globaltool'
          $blobs = Get-AzStorageBlob -Context $sourceContext -Container $sourceContainerName -Prefix $prefix

          Write-Verbose -Verbose "Blobs found in $sourceContainerName"
          $blobs.Name | Write-Verbose -Verbose

          Write-Verbose -Verbose "Copying blobs from $sourceContainerName to $destinationContainerName"

          foreach ($blob in $blobs) {
            $sourceBlobName = $blob.Name
            Write-Verbose -Verbose "sourceBlobName = $sourceBlobName"

            $destinationBlobName = $sourceBlobName -replace "$prefix", '$(Version)'
            Write-Verbose -Verbose "destinationBlobName = $destinationBlobName"

            Copy-AzStorageBlob -SourceContext $sourceContext -DestinationContext $destinationContext -SrcContainer $sourceContainerName -SrcBlob $sourceBlobName -DestContainer $destinationContainerName -DestBlob $destinationBlobName -Force -Verbose -Confirm:$false
          }
