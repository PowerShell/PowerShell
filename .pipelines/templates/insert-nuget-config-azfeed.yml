parameters:
- name: "repoRoot"
  default: $(REPOROOT)
steps:
- pwsh: |
    $configPath = "${env:NugetConfigDir}/nuget.config"
    Import-Module ${{ parameters.repoRoot }}/build.psm1 -Force

    $powerShellPublicPackages = New-NugetPackageSource -Url '$(AzDevOpsFeed)' -Name 'AzDevOpsFeed'

    New-NugetConfigFile -NugetPackageSource $powerShellPublicPackages -UserName $(AzDevopsFeedUserNameKVPAT) -ClearTextPAT $(powershellPackageReadPat) -Destination "${env:NugetConfigDir}"
    if(-not (Test-Path $configPath))
    {
        throw "nuget.config is not created"
    }
    Get-Content $configPath | Write-Verbose -Verbose
  displayName: 'Add nuget.config for Azure DevOps feed for PSGallery modules'
  condition: and(succeededOrFailed(), ne(variables['UseAzDevOpsFeed'], ''))
  env:
    NugetConfigDir: ${{ parameters.repoRoot }}/src/Modules
    ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

- pwsh: |
    $configPath = "${env:NugetConfigDir}/nuget.config"
    Import-Module ${{ parameters.repoRoot }}/build.psm1 -Force

    $powerShellPublicPackages = New-NugetPackageSource -Url '$(AzDevOpsFeed)' -Name 'AzDevOpsFeed'

    New-NugetConfigFile -NugetPackageSource $powerShellPublicPackages -UserName $(AzDevopsFeedUserNameKVPAT) -ClearTextPAT $(powershellPackageReadPat) -Destination "${env:NugetConfigDir}"
    if (-not (Test-Path $configPath))
    {
        throw "nuget.config is not created"
    }
    Get-Content $configPath | Write-Verbose -Verbose
  displayName: 'Add nuget.config for Azure DevOps feed for packages'
  condition: and(succeededOrFailed(), ne(variables['UseAzDevOpsFeed'], ''))
  env:
    NugetConfigDir: ${{ parameters.repoRoot }}
    ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase
