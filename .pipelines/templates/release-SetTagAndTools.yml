jobs:
- job: SetTagAndTools
  displayName: Set Tag and Tools
  condition: succeeded()
  pool:
    type: windows
  variables:
  - group: 'mscodehub-code-read-akv'
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  steps:
  - template: release-SetReleaseTagandContainerName.yml@self

  - pwsh: |
      git clone --depth 1 https://$(mscodehubCodeReadPat)@mscodehub.visualstudio.com/PowerShellCore/_git/Internal-PowerShellTeam-Tools '$(Pipeline.Workspace)/tools'
    displayName: Clone Internal-Tools repository

  - pwsh: |
      New-Item -ItemType Directory -Path '$(Pipeline.Workspace)/ToolArtifact'
      Get-ChildItem -Path '$(Pipeline.Workspace)/tools/Scripts' -Filter 'GitHubRelease.psm1' -ErrorAction SilentlyContinue |
        Copy-Item -Destination '$(Pipeline.Workspace)/ToolArtifact'
      
      Write-Verbose -Verbose "The tools will be signed and uploaded to artifacts: "
      Get-ChildItem -Path '$(Pipeline.Workspace)/ToolArtifact' -Recurse |
        ForEach-Object {
          Write-Verbose -Verbose $_.FullName
        }
    displayName: Move GitHub Tool

  - task: onebranch.pipeline.signing@1
    displayName: Sign Tools
    inputs:
      command: 'sign'
      signing_profile: internal_azure_service
      files_to_sign: '*.ps1;*.psm1'
      search_root: '$(Pipeline.Workspace)/ToolArtifact'

  - pwsh: | 
      Write-Verbose -Verbose "Creating output directory for release tools: $(ob_outputDirectory)/ToolArtifact"
      New-Item -Path $(ob_outputDirectory)/ToolArtifact -ItemType Directory -Force
      Get-ChildItem -Path "$(Pipeline.Workspace)/ToolArtifact/*" -Recurse | 
        ForEach-Object { Write-Verbose -Verbose $_.FullName ; $_  } |
        Copy-Item -Destination $(ob_outputDirectory)/ToolArtifact -Recurse
    displayName: Upload Tools
  
  - pwsh: |
      Write-Verbose -Verbose "Release Tag: $(ReleaseTag)"
      $releaseVersion = '$(ReleaseTag)' -replace '^v',''
      Write-Verbose -Verbose "Release Version: $releaseVersion"
      $semanticVersion = [System.Management.Automation.SemanticVersion]$releaseVersion

      $isPreview = $semanticVersion.PreReleaseLabel -ne $null

      $fileName = if ($isPreview) {
        "preview.md"
      }
      else {
        $semanticVersion.Major.ToString() + "." + $semanticVersion.Minor.ToString() + ".md"
      }

      $filePath = "$(REPOROOT)/PowerShell/CHANGELOG/$fileName"
      Write-Verbose -Verbose "Selected Log file: $filePath"
      
      Write-Verbose -Verbose "Creating output directory for CHANGELOG: $(ob_outputDirectory)/CHANGELOG"
      New-Item -Path $(ob_outputDirectory)/CHANGELOG -ItemType Directory -Force
      Copy-Item -Path $filePath -Destination $(ob_outputDirectory)/CHANGELOG
    displayName: Upload Changelog
