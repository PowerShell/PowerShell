# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

jobs:
  - job: APIScan
    variables:
      - name: runCodesignValidationInjection
        value : false
      - name: NugetSecurityAnalysisWarningLevel
        value: none
      - name: ReleaseTagVar
        value: fromBranch
      # Defines the variables APIScanClient, APIScanTenant and APIScanSecret
      - group: PS-PS-APIScan
      - name: branchCounterKey
        value: $[format('{0:yyyyMMdd}-{1}', pipeline.startTime,variables['Build.SourceBranch'])]
      - name: branchCounter
        value: $[counter(variables['branchCounterKey'], 1)]
      - group: DotNetPrivateBuildAccess
      - group: Azure Blob variable group
      - group: ReleasePipelineSecrets
      - group: mscodehub-feed-read-general
      - group: mscodehub-feed-read-akv
      - name: ob_outputDirectory
        value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
      - name: repoRoot
        value: '$(Build.SourcesDirectory)\PowerShell'
      - name: ob_sdl_tsa_configFile
        value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
      - name: ob_sdl_credscan_suppressionsFile
        value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json
      - name: Codeql.SourceRoot
        value: $(repoRoot)

    pool:
        type: windows

    # APIScan can take a long time
    timeoutInMinutes: 180

    steps:
    - checkout: self
      clean: true
      fetchTags: true
      fetchDepth: 1000
      displayName: Checkout PowerShell
      retryCountOnTaskFailure: 1
      env:
        ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

    - template: ../SetVersionVariables.yml
      parameters:
        ReleaseTagVar: $(ReleaseTagVar)
        CreateJson: yes
        UseJson: no

    - template: ../insert-nuget-config-azfeed.yml
      parameters:
        repoRoot: '$(repoRoot)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        useGlobalJson: true
        packageType: 'sdk'
        workingDirectory: $(Build.SourcesDirectory)"

    - pwsh: |
        Import-Module .\build.psm1 -force
        Find-DotNet
        dotnet tool install dotnet-symbol --tool-path $(Agent.ToolsDirectory)\tools\dotnet-symbol
        $symbolToolPath = Get-ChildItem -Path $(Agent.ToolsDirectory)\tools\dotnet-symbol\dotnet-symbol.exe | Select-Object -First 1 -ExpandProperty FullName
        Write-Host "##vso[task.setvariable variable=symbolToolPath]$symbolToolPath"
      displayName: Install dotnet-symbol
      workingDirectory: '$(repoRoot)'
      retryCountOnTaskFailure: 2

    - task: AzurePowerShell@5
      displayName: Download winverify-private Artifacts
      inputs:
        azureSubscription: az-blob-cicd-infra
        scriptType: inlineScript
        azurePowerShellVersion: LatestVersion
        workingDirectory: '$(repoRoot)'
        pwsh: true
        inline: |
          # download smybols for getfilesiginforedist.dll
          $storageAccountName = "pscoretestdata"
          $containerName = 'winverify-private'
          $winverifySymbolsPath = New-Item -ItemType Directory -Path '$(System.ArtifactsDirectory)/winverify-symbols' -Force
          $dllName = 'getfilesiginforedist.dll'
          $winverifySymbolsDllPath = Join-Path $winverifySymbolsPath $dllName

          $context = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount
          Get-AzStorageBlobContent -Container $containerName -Blob $dllName -Destination $winverifySymbolsDllPath -Context $context

    - pwsh: |
        Get-ChildItem -Path '$(System.ArtifactsDirectory)/winverify-symbols'
      displayName: Capture winverify-private Artifacts
      workingDirectory: '$(repoRoot)'
      condition: succeededOrFailed()

    - task: CodeQL3000Init@0 # Add CodeQL Init task right before your 'Build' step.
      displayName: üîè CodeQL 3000 Init
      condition: eq(variables['CODEQL_ENABLED'], 'true')
      inputs:
        Language: csharp

    - pwsh: |
        Import-Module .\build.psm1 -force
        Find-DotNet
        Start-PSBuild -Configuration StaticAnalysis -PSModuleRestore -Clean -Runtime fxdependent-win-desktop

        $OutputFolder = Split-Path (Get-PSOutput)

        Write-Verbose -Verbose -Message "Deleting ref folder from output folder"
        if (Test-Path $OutputFolder/ref) {
          Remove-Item -Recurse -Force $OutputFolder/ref
        }

        $Destination = '$(ob_outputDirectory)'
        if (-not (Test-Path $Destination)) {
          Write-Verbose -Verbose -Message "Creating destination folder '$Destination'"
          $null = mkdir $Destination
        }

        Copy-Item -Path "$OutputFolder\*" -Destination $Destination -Recurse -Verbose
      workingDirectory: '$(repoRoot)'
      displayName: 'Build PowerShell Source'

    - pwsh: |
        # Only keep windows runtimes
        Write-Verbose -Verbose -Message "Deleting non-win-x64 runtimes ..."
        Get-ChildItem -Path '$(ob_outputDirectory)\runtimes\*' | Where-Object {$_.FullName -notmatch '.*\\runtimes\\win'} | Foreach-Object {
          Write-Verbose -Verbose -Message "Deleting $($_.FullName)"
          Remove-Item -Path $_.FullName -Recurse -Force
        }

        # Remove win-x86/arm/arm64 runtimes due to issues with those runtimes
        Write-Verbose -Verbose -Message "Temporarily deleting win-x86/arm/arm64 runtimes ..."
        Get-ChildItem -Path '$(ob_outputDirectory)\runtimes\*' | Where-Object {$_.FullName -match '.*\\runtimes\\win-(x86|arm)'} | Foreach-Object {
          Write-Verbose -Verbose -Message "Deleting $($_.FullName)"
          Remove-Item -Path $_.FullName -Recurse -Force
        }

        Write-Host
        Write-Verbose -Verbose -Message "Show content in 'runtimes' folder:"
        Get-ChildItem -Path '$(ob_outputDirectory)\runtimes'
        Write-Host

        # # Replace 'getfilesiginforedist.dll' from the 'runtimes\win-x64' folder
        # Write-Verbose -Verbose -Message "Replace 'getfilesiginforedist.dll':"
        # $targetFile = Get-ChildItem -Path '$(ob_outputDirectory)\runtimes\*' -Recurse | Where-Object {$_.Name -eq 'getfilesiginforedist.dll'}
        # Remove-Item -Path $targetFile.FullName -Verbose
        # Copy-Item -Path '$(System.ArtifactsDirectory)\winverify-symbols\getfilesiginforedist.dll' -Destination $targetFile.FullName -Verbose
      workingDirectory: '$(repoRoot)'
      displayName: 'Remove unused runtimes'

    - task: CodeQL3000Finalize@0 # Add CodeQL Finalize task right after your 'Build' step.
      displayName: üîè CodeQL 3000 Finalize
      condition: eq(variables['CODEQL_ENABLED'], 'true')

    - pwsh: |
        Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
      workingDirectory: '$(repoRoot)'
      displayName: Capture Environment
      condition: succeededOrFailed()

    # Explicitly download symbols for the drop since the SDL image doesn't have http://SymWeb access and APIScan cannot handle https yet.
    - pwsh: |
        Import-Module .\build.psm1 -force
        Find-DotNet
        $pat = '$(SymbolServerPAT)'
        if ($pat -like '*PAT*' -or $pat -eq '')
        {
          throw 'No PAT defined'
        }
        $url = 'https://microsoft.artifacts.visualstudio.com/defaultcollection/_apis/symbol/symsrv'
        $(symbolToolPath) --authenticated-server-path $(SymbolServerPAT) $url --symbols -d "$env:ob_outputDirectory\*" --recurse-subdirectories
      displayName: 'Download Symbols for binaries'
      retryCountOnTaskFailure: 2
      workingDirectory: '$(repoRoot)'

    - pwsh: |
        Get-ChildItem '$(ob_outputDirectory)' -File -Recurse |
        Foreach-Object {
          [pscustomobject]@{
            Path = $_.FullName
            Version = $_.VersionInfo.FileVersion
            Md5Hash = (Get-FileHash -Algorithm MD5 -Path $_.FullName).Hash
            Sha512Hash = (Get-FileHash -Algorithm SHA512 -Path $_.FullName).Hash
          }
        } | Export-Csv -Path '$(Build.SourcesDirectory)/ReleaseFileHash.csv'
      workingDirectory: '$(repoRoot)'
      displayName: 'Create release file hash artifact'

    - pwsh: |
        Copy-Item -Path '$(Build.SourcesDirectory)/ReleaseFileHash.csv' -Destination '$(ob_outputDirectory)' -Verbose
      displayName: 'Publish Build File Hash artifact'

    - pwsh: |
        Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
      displayName: Capture Environment
      condition: succeededOrFailed()
      workingDirectory: '$(repoRoot)'
