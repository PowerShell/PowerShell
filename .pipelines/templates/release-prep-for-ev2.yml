jobs:
- job: CopyEV2FilesToArtifact
  displayName: Copy EV2 Files to Artifact
  pool:
    type: windows
  variables:
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: repoRoot
    value: '$(Build.SourcesDirectory)/PowerShell'
  - name: ev2ServiceGroupRootFolder
    value: '$(Build.SourcesDirectory)/PowerShell/.pipelines/EV2Specs/ServiceGroupRoot'
  - name: ev2ParametersFolder
    value: '$(Build.SourcesDirectory)/PowerShell/.pipelines/EV2Specs/ServiceGroupRoot/Paramters'
  - group: 'mscodehub-code-read-akv'
  - group: 'packages.microsoft.com'
  - name: ob_tipsign_enabled
    value: true # Enable TiP sign
  - name: ob_sdl_credscan_suppressionsFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json
  steps:
  - checkout: self ## the global setting on lfs didn't work
    lfs: false

  - template: release-SetReleaseTagandContainerName.yml
  
  - pwsh: |
      $packageVersion = '$(ReleaseTag)'.ToLowerInvariant() -replace '^v',''
      $vstsCommandString = "vso[task.setvariable variable=packageVersion]$packageVersion"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: Set Package version
  
  - pwsh: |
      $branch = 'mirror-target'
      $gitArgs = "clone",
      "--verbose",
      "--branch",
      "$branch",
      "https://$(mscodehubCodeReadPat)@mscodehub.visualstudio.com/PowerShellCore/_git/Internal-PowerShellTeam-Tools",
      '$(Pipeline.Workspace)/tools'
      $gitArgs | Write-Verbose -Verbose
      git $gitArgs
    displayName: Clone Internal-PowerShellTeam-Tools from MSCodeHub

  - pwsh: |
      Get-ChildItem Env: | Out-String -Stream | write-Verbose -Verbose
    displayName: 'Capture Environment Variables'

  - pwsh: |
      Get-ChildItem '$(Pipeline.Workspace)' -Recurse | Out-String -Stream | write-Verbose -Verbose
      Get-ChildItem '$(Build.SourcesDirectory)'
    displayName: 'Capture Workspace'

  - pwsh: |
      New-Item -Path '$(ev2ParametersFolder)' -ItemType Directory
    displayName: 'Create Parameters folder under EV2Specs folder'

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.12.7'
    inputs:
      versionSpec: 3.12.7

  - task: PipAuthenticate@1
    inputs:
      artifactFeeds: 'PowerShellCore/PowerShellCore_PublicPackages'
    displayName: 'Pip Authenticate'

  - pwsh: |
      python -m pip install --upgrade pip
      pip --version --verbose

      Write-Verbose -Verbose "Download pmc-cli to folder without installing it"
      $ev2SpecsFolder = "$(repoRoot)/.pipelines/EV2Specs"
      $shellExtensionBundleDir = "$ev2SpecsFolder/ServiceGroupRoot/Shell/Run"
      $pythonDlFolderPath = Join-Path -Path $shellExtensionBundleDir -ChildPath "python_dl"
      pip download -d $pythonDlFolderPath pmc-cli --verbose
    displayName: 'Download pmc-cli package'

  - download: PSPackagesOfficial
    artifact: 'drop_linux_package_deb'
    displayName: 'Download artifact containing .deb_amd64.deb file from PSPackagesOfficial triggering pipeline'

  - download: PSPackagesOfficial
    artifact: 'drop_linux_package_rpm'
    displayName: 'Download artifact containing .rh.x64_86.rpm file from PSPackagesOfficial triggering pipeline'

  - download: PSPackagesOfficial
    artifact: 'drop_linux_package_mariner_x64'
    displayName: 'Download artifact containing .cm.x86_64.rpm file from PSPackagesOfficial triggering pipeline'

  - download: PSPackagesOfficial
    artifact: 'drop_linux_package_mariner_arm64'
    displayName: 'Download artifact containing .cm.aarch64.rpm file from PSPackagesOfficial triggering pipeline'

  - pwsh: |
      Write-Verbose -Verbose "Copy ESRP signed .deb and .rpm packages"
      $downloadedPipelineFolder = Join-Path '$(Pipeline.Workspace)' -ChildPath 'PSPackagesOfficial'
      $srcFilesFolder = Join-Path -Path '$(Pipeline.Workspace)' -ChildPath 'SourceFiles'
      New-Item -Path $srcFilesFolder -ItemType Directory
      $packagesFolder = Join-Path -Path $srcFilesFolder -ChildPath 'packages'
      New-Item -Path $packagesFolder -ItemType Directory

      $packageFiles = Get-ChildItem -Path $downloadedPipelineFolder -Recurse -Directory -Filter "drop_*" | Get-ChildItem -File -Include *.deb, *.rpm
      foreach ($file in $packageFiles)
      {
        Write-Verbose -Verbose "copying file: $($file.FullName)"
        Copy-Item -Path $($file.FullName) -Destination $packagesFolder -Verbose
      }

      $packagesTarGzDestination = Join-Path -Path '$(ev2ParametersFolder)' -ChildPath 'packages.tar.gz'
      tar -czvf $packagesTarGzDestination -C $packagesFolder .
    displayName: 'Copy signed .deb and .rpm packages to .tar.gz to pass as a file var to shell extension'

  - pwsh: |
      $pathToPMCMetadataFile = Join-Path -Path '$(ev2ParametersFolder)' -ChildPath 'pmcMetadata.json'

      $metadata = Get-Content -Path "$(repoRoot)/tools/metadata.json" -Raw | ConvertFrom-Json
      $skipPublishVar = '${{ parameters.skipPublish }}'
      $metadataHash = @{}
      $metadataHash["ReleaseTag"] = "$(ReleaseTag)"
      # $metadataHash["AadClientId"] = '$(PmcCliClientID)'
      $metadataHash["BlobFolderName"] = "$(ReleaseTag)"
      $metadataHash["LTS"] = $metadata.LTSRelease.Latest
      $metadataHash["ForProduction"] = $true
      $metadataHash["SkipPublish"] = $skipPublishVar

      $metadataHash | ConvertTo-Json | Out-File $pathToPMCMetadataFile

      Write-Verbose -Verbose "Copy mapping.json file to EV2Specs folder. file path at path $mappingFilePath exists: $mappingFilePathExists"
      $mappingFilePath = Join-Path -Path '$(repoRoot)/tools/packages.microsoft.com' -ChildPath 'mapping.json'
      $mappingFilePathExists = Test-Path $mappingFilePath
      $mappingFileEV2Path = Join-Path -Path '$(ev2ParametersFolder)' -ChildPath "mapping.json"
      Copy-Item -Path $mappingFilePath -Destination $mappingFileEV2Path
    displayName: 'Create pmcScriptMetadata.json and mapping.json file'

  - pwsh: |
      $settingFilePath = Join-Path '$(ev2ServiceGroupRootFolder)/Shell/Run' -ChildPath 'settings.toml'
      New-Item -Path $settingFilePath -ItemType File
      $pmcMIClientID = '$(PmcMIClientID)'

      Add-Content -Path $settingFilePath -Value "[default]"
      Add-Content -Path $settingFilePath -Value "base_url = `"https://pmc-ingest.trafficmanager.net/api/v4`""
      Add-Content -Path $settingFilePath -Value "auth_type = `"msi`""
      Add-Content -Path $settingFilePath -Value "client_id = `"$pmcMIClientID`""
    displayName: 'Create settings.toml file with MI clientId populated'

  - task: onebranch.pipeline.signing@1
    inputs:
      command: 'sign'
      signing_profile: 'tipsign' # external_distribution
      files_to_sign: '*.ps1'
      search_root: '$(repoRoot)/.pipelines/EV2Specs/ServiceGroupRoot/Shell/Run'
    displayName: Sign Run.ps1

  - pwsh: |
      $srcPath = Join-Path '$(repoRoot)/.pipelines/EV2Specs/ServiceGroupRoot' -ChildPath 'Shell'
      $pathToRunTarFile = Join-Path '$(repoRoot)/.pipelines/EV2Specs/ServiceGroupRoot/Shell' -ChildPath "Run.tar"
      tar -cvf $pathToRunTarFile -C $srcPath ./Run
      # TODO: ensure this has: Run.ps1, settings.toml, python_dl
    displayName: 'Create archive for the shell extension'

  - pwsh: |
      $pathToJsonFile = Join-Path -Path '$(ev2ServiceGroupRootFolder)' -ChildPath 'RolloutSpec.json'
      $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json
      $content.RolloutMetadata.Notification.Email.To = '$(PmcEV2SupportEmail)'
      Remove-Item -Path $pathToJsonFile
      $content | ConvertTo-Json -Depth 4 | Out-File $pathToJsonFile
    displayName: 'Replace values in RolloutSpecPath.json'

  - pwsh: |
      $pathToJsonFile = Join-Path -Path '$(ev2ServiceGroupRootFolder)' -ChildPath 'UploadLinux.Rollout.json'
      $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json

      $identityString = "/subscriptions/$(PmcSubscription)/resourcegroups/$(PmcResourceGroup)/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$(PmcMIName)"
      $content.shellExtensions.launch.identity.userAssignedIdentities[0] = $identityString

      Remove-Item -Path $pathToJsonFile
      $content | ConvertTo-Json -Depth 6 | Out-File $pathToJsonFile
    displayName: 'Replace values in UploadLinux.Rollout.json file'

  - pwsh: |
      $pathToJsonFile = Join-Path -Path '$(ev2ServiceGroupRootFolder)' -ChildPath 'ServiceModel.json'
      $content = Get-Content -Path $pathToJsonFile | ConvertFrom-Json
      $content.ServiceResourceGroups[0].AzureResourceGroupName = '$(PmcResourceGroup)'
      $content.ServiceResourceGroups[0].AzureSubscriptionId = '$(PmcSubscription)'

      Remove-Item -Path $pathToJsonFile
      $content | ConvertTo-Json -Depth 9 | Out-File $pathToJsonFile
    displayName: 'Replace values in ServiceModel.json'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(repoRoot)/.pipelines'
      Contents: 'EV2Specs/**'
      TargetFolder: $(ob_outputDirectory)
