parameters:
  pool: 'windows-2019'
  imageName: 'PSWindows11-ARM64'
  parentJobs: []
  purpose: ''
  tagSet: 'CI'

jobs:
- job: win_test_${{ parameters.purpose }}_${{ parameters.tagSet }}
  dependsOn:
    ${{ parameters.parentJobs }}
  pool:
    ${{ if startsWith( parameters.pool, 'windows-') }}:
      vmImage: ${{ parameters.pool }}
    ${{ else }}:
      name: ${{ parameters.pool }}
      demands:
      - ImageOverride -equals ${{ parameters.imageName }}

  displayName: Windows Test - ${{ parameters.purpose }} - ${{ parameters.tagSet }}

  steps:
  - powershell: |
      [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
      $pwsh = Get-Command pwsh -ErrorAction SilentlyContinue -CommandType Application

      if ($null -eq $pwsh) {
        $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -Destination $powerShellPath
        $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      }

    displayName: Install PowerShell if missing
    condition: ne('${{ parameters.pool }}', 'windows-2019')

  - pwsh: |
      Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
    displayName: Capture Environment
    condition: succeededOrFailed()

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      itemPattern: |
        build/**/*
      downloadPath: '$(System.ArtifactsDirectory)'

  - pwsh: |
      Get-ChildItem "$(System.ArtifactsDirectory)\*" -Recurse
    displayName: 'Capture Artifacts Directory'
    continueOnError: true

  # must be run frow Windows PowerShell
  - powershell: |
      # Remove "Program Files\dotnet" from the env variable PATH, so old SDKs won't affect us.
      Write-Host "Old Path:"
      Write-Host $env:Path

      $dotnetPath = Join-Path $env:SystemDrive 'Program Files\dotnet'
      $paths = $env:Path -split ";" | Where-Object { -not $_.StartsWith($dotnetPath) }
      $env:Path = $paths -join ";"

      Write-Host "New Path:"
      Write-Host $env:Path

      # Bootstrap
      Import-Module .\tools\ci.psm1
      Invoke-CIInstall
    displayName: Bootstrap

  - pwsh: |
      Import-Module .\build.psm1 -force
      Start-PSBootstrap
      Import-Module .\tools\ci.psm1
      Restore-PSOptions -PSOptionsPath '$(System.ArtifactsDirectory)\build\psoptions.json'
      $options = (Get-PSOptions)
      $path = split-path -path $options.Output
      $rootPath = split-Path -path $path
      Expand-Archive -Path '$(System.ArtifactsDirectory)\build\build.zip' -DestinationPath $rootPath -Force
      Invoke-CITest -Purpose '${{ parameters.purpose }}' -TagSet '${{ parameters.tagSet }}'
    displayName: Test
    condition: succeeded()
