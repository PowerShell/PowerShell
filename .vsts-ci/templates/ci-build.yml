parameters:
  - name: pool
    default: 'windows-latest'
  - name: imageName
    default: 'PSWindows11-ARM64'
  - name: jobName
    default: 'win_build'
  - name: displayName
    default: Windows Build
  - name: PoolType
    default: AzDoHosted
    type: string
    values:
      - AzDoHosted
      - 1esHosted

jobs:
- job: ${{ parameters.jobName }}
  pool:
    ${{ if eq( parameters.PoolType, 'AzDoHosted') }}:
      vmImage: ${{ parameters.pool }}
    ${{ else }}:
      name: ${{ parameters.pool }}
      demands:
      - ImageOverride -equals ${{ parameters.imageName }}

  displayName: ${{ parameters.displayName }}

  steps:
  - powershell: |
      [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
      $pwsh = Get-Command pwsh -ErrorAction SilentlyContinue -CommandType Application

      if ($null -eq $pwsh) {
        $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -Destination $powerShellPath
        $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      }

    displayName: Install PowerShell

  - checkout: self
    fetchDepth: 1000

  - pwsh: |
      Get-ChildItem -Path env: | Out-String -width 9999 -Stream | write-Verbose -Verbose
    displayName: Capture Environment
    condition: succeededOrFailed()

  - pwsh:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - ${{ if ne(variables['UseAzDevOpsFeed'], '') }}:
    - template: /tools/releaseBuild/azureDevOps/templates/insert-nuget-config-azfeed.yml

  - pwsh: |
      Import-Module .\tools\ci.psm1
      Invoke-CIInstall -SkipUser
      Write-Verbose -Verbose "Start Sync-PSTags"
      Sync-PSTags -AddRemoteIfMissing
      Write-Verbose -Verbose "End Sync-PSTags"
    displayName: Bootstrap
    condition: succeeded()

  - pwsh: |
      Import-Module .\tools\ci.psm1
      Invoke-CIBuild
    displayName: Build
    condition: succeeded()

  - pwsh: |
      Import-Module .\tools\ci.psm1
      Restore-PSOptions
      Invoke-CIxUnit -SkipFailing
    displayName: xUnit Tests
    condition: succeeded()
    continueOnError: true
